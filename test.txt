openapi: 3.0.1
info:
  title: REST API for Flexicore filtered by your access rights
  description: Flexicore REST API
  termsOfService: share and care
  contact:
    name: Flexicore Support
    url: http://wizzdi.com
    email: avishay@flexi-core.com
  license:
    name: Contact for license
  version: V3.2.0
externalDocs:
  description: Flexicore
  url: http://Flexicore-tech/docs.html
servers:
  - url: /FlexiCore/rest
    variables: {}
  - url: /
    variables: {}
tags:
  - name: Categories
    description: Handle Categories management. Categories provide filtering of entities instances. Categories can be defined for sub-list of system entities
  - name: UIPlugin
    description: UIPlugin Api
  - name: SupplyTimeItem
    description: SupplyTimeItem Api
paths: {}
components:
  schemas:
    AuthenticationResponseCompatible:
      type: object
      properties:
        authenticationKey:
          type: string
        tokenExpirationDate:
          type: string
          format: date-time
        userId:
          type: string
    AuthenticationRequest:
      type: object
      properties:
        email:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
        secondsValid:
          type: integer
          format: int64
    AuthenticationBundle:
      type: object
      properties:
        mail:
          type: string
        authenticationkey:
          type: string
    AuthenticationRequestHolder:
      type: object
      properties:
        mail:
          type: string
          description: email , required if phone number or facebookUserId is not provided
        phoneNumber:
          type: string
          description: phonenumber , required if email or facebookUserId is not provided
        password:
          type: string
          description: password , required if facebookToken not provided
        apikey:
          type: string
          description: login to specific tenant (objects that will be created with the returned key will belong to this tenant) , if not provided will use the default tenant for this user
        facebookUserId:
          type: string
          description: facebookUserId , required if phone number or email is not provided
        facebookToken:
          type: string
          description: facebookToken , required if password not provided
      description: Used to log into the system
    Baseclass:
      required:
        - json-type
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
        json-type:
          type: string
      discriminator:
        propertyName: json-type
    FileResource:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties:
            md5:
              type: string
            offset:
              type: integer
              format: int64
            actualFilename:
              type: string
            originalFilename:
              type: string
            done:
              type: boolean
            dateTaken:
              type: string
              format: date-time
            nonDownloadable:
              type: boolean
            keepUntil:
              type: string
              format: date-time
            onlyFrom:
              type: string
    Tenant:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties:
            externalId:
              type: string
            icon:
              $ref: '#/components/schemas/FileResource'
    ParameterInfo:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        displayName:
          type: string
        type:
          type: string
        defaultValue:
          type: string
        regexValidation:
          type: string
        rangeMax:
          type: number
          format: double
        rangeMin:
          type: number
          format: double
        valueSteps:
          type: number
          format: double
        idRef:
          type: boolean
        list:
          type: boolean
        mandatory:
          type: boolean
        actionId:
          type: boolean
        possibleValues:
          uniqueItems: true
          type: array
          items:
            type: string
    BaseclassNotIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    BaseclassOnlyIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    ClazzIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
      description: List of ids of clazz , these must be accessible by the current user.
    GetClassInfo:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            className:
              type: string
    SortParameter:
      type: object
      properties:
        filteringId:
          type: string
        name:
          type: string
          description: Name of the column to sort by
        sortingOrder:
          type: string
          description: Ascending or descending order, alphabetically
          enum:
            - ASCENDING
            - DESCENDING
      description: Use for sorting, includes field name and the direction of sorting
    TenantIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
      description: List of ids of tenants , these must be accessible by the current user.
    FilteringInformationHolder:
      allOf:
        - $ref: '#/components/schemas/ExecutionParametersHolder'
        - type: object
          properties:
            sort:
              type: array
              description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
              items:
                $ref: '#/components/schemas/SortParameter'
            nameLike:
              type: string
              description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
              example: '%John Smith%'
            fullTextLike:
              type: string
              description: 'field to search free text '
            likeCaseSensitive:
              type: boolean
              description: if true, like strings are case sensitive.
            fromDate:
              type: string
              description: The creation date before which no instances will be retrieved.
              format: date-time
            toDate:
              type: string
              description: The creation date after which no instances will be retrieved.
              format: date-time
            pageSize:
              type: integer
              format: int32
            currentPage:
              type: integer
              description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
              format: int32
            resultType:
              type: string
            excludingIds:
              type: array
              items:
                $ref: '#/components/schemas/BaseclassNotIdFiltering'
            onlyIds:
              type: array
              items:
                $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
            tenantIds:
              type: array
              description: List of ids of tenants , these must be accessible by the current user.
              items:
                $ref: '#/components/schemas/TenantIdFiltering'
            clazzIds:
              type: array
              description: List of ids of clazz , these must be accessible by the current user.
              items:
                $ref: '#/components/schemas/ClazzIdFiltering'
            fetchSoftDelete:
              type: boolean
              description: fetch soft delete objects as well as non soft deleted objects
            permissionContextLike:
              type: string
              description: Search Permission Context
          description: This class is used to filter a list. There are many extenders of this class adding information pertinent to some class, for example the EquipmentShort class has an extender that includes additional information such as location area on the map, street etc.
    CSVFormat:
      type: object
      properties:
        allowDuplicateHeaderNames:
          type: boolean
        allowMissingColumnNames:
          type: boolean
        autoFlush:
          type: boolean
        commentMarker:
          type: string
        delimiter:
          type: string
        escapeCharacter:
          type: string
        header:
          type: array
          items:
            type: string
        headerComments:
          type: array
          items:
            type: string
        ignoreEmptyLines:
          type: boolean
        ignoreHeaderCase:
          type: boolean
        ignoreSurroundingSpaces:
          type: boolean
        nullString:
          type: string
        quoteCharacter:
          type: string
        quoteMode:
          type: string
          enum:
            - ALL
            - ALL_NON_NULL
            - MINIMAL
            - NON_NUMERIC
            - NONE
        recordSeparator:
          type: string
        skipHeaderRecord:
          type: boolean
        trailingDelimiter:
          type: boolean
        trim:
          type: boolean
        escapeCharacterSet:
          type: boolean
        nullStringSet:
          type: boolean
        quoteCharacterSet:
          type: boolean
        commentMarkerSet:
          type: boolean
    ExportBaseclassGenericFilteringInformationHolder:
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/FilteringInformationHolder'
        fieldToName:
          type: object
          additionalProperties:
            type: string
        csvFormat:
          $ref: '#/components/schemas/CSVFormat'
    BaseclassNoSQL:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        dateCreated:
          type: string
          format: date-time
        name:
          type: string
        updateDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    BaseclassNoSQLCreate:
      type: object
      properties:
        name:
          type: string
    BaseclassNoSQLUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseclassNoSQLCreate'
        - type: object
          properties:
            id:
              type: string
    ClassInfo:
      type: object
      properties:
        clazzId:
          type: string
        displayName:
          type: string
        description:
          type: string
    PaginationResponseClassInfo:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ClassInfo'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    SetBaseclassTenantRequest:
      type: object
      properties:
        ids:
          uniqueItems: true
          type: array
          items:
            type: string
        tenantId:
          type: string
    PaginationResponseBaseclass:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Baseclass'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    BaselinkFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            leftsideIds:
              uniqueItems: true
              type: array
              items:
                type: string
            leftsideTypeClassName:
              type: string
            rightsideIds:
              uniqueItems: true
              type: array
              items:
                type: string
            rightsideTypeClassName:
              type: string
            valueId:
              type: string
            simpleValue:
              type: string
            linkClassName:
              type: string
    GetConnected:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            wantedClassName:
              type: string
            baselinkFilter:
              $ref: '#/components/schemas/BaselinkFilter'
    GetDisconnected:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            wantedClassName:
              type: string
            baselinkFilter:
              $ref: '#/components/schemas/BaselinkFilter'
    MassDeleteResponse:
      type: object
      properties:
        deletedIds:
          uniqueItems: true
          type: array
          items:
            type: string
    MassDeleteRequest:
      type: object
      properties:
        ids:
          uniqueItems: true
          type: array
          items:
            type: string
    Baselink:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties:
            rightside:
              $ref: '#/components/schemas/Baseclass'
            leftside:
              $ref: '#/components/schemas/Baseclass'
            simplevalue:
              type: string
            value:
              $ref: '#/components/schemas/Baseclass'
    BaselinkCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        leftsideId:
          type: string
        rightsideId:
          type: string
        valueId:
          type: string
        simpleValue:
          type: string
        linkClassName:
          type: string
    BaselinkMassCreate:
      type: object
      properties:
        leftsideIds:
          uniqueItems: true
          type: array
          items:
            type: string
        rightsideIds:
          uniqueItems: true
          type: array
          items:
            type: string
        valueId:
          type: string
        simpleValue:
          type: string
        linkClassName:
          type: string
    BaselinkUpdate:
      allOf:
        - $ref: '#/components/schemas/BaselinkCreate'
        - type: object
          properties:
            id:
              type: string
    PaginationResponseBaselink:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Baselink'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    DynamicInvoker:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties:
            canonicalName:
              type: string
    Operation:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties:
            auditable:
              type: boolean
            defaultaccess:
              type: string
              enum:
                - deny
                - allow
            dynamicInvoker:
              $ref: '#/components/schemas/DynamicInvoker'
    Clazz:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties: {}
    ClazzLink:
      allOf:
        - $ref: '#/components/schemas/Clazz'
        - type: object
          allOf:
            - $ref: '#/components/schemas/Clazz'
            - type: object
              properties:
                left:
                  $ref: '#/components/schemas/Clazz'
                right:
                  $ref: '#/components/schemas/Clazz'
                value:
                  $ref: '#/components/schemas/Clazz'
    PaginationResponseClazz:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Clazz'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    ZipAndDownloadRequest:
      type: object
      properties:
        fileResourceIds:
          uniqueItems: true
          type: array
          items:
            type: string
        failOnMissing:
          type: boolean
        offset:
          type: integer
          format: int64
    ZipFile:
      allOf:
        - $ref: '#/components/schemas/FileResource'
        - type: object
          properties: {}
    PaginationResponseOperation:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    InvokersOperationFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            invokerIds:
              uniqueItems: true
              type: array
              items:
                type: string
    DynamicExecution:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties:
            serviceCanonicalNames:
              type: array
              items:
                $ref: '#/components/schemas/ServiceCanonicalName'
            methodName:
              type: string
            executionParametersHolder:
              $ref: '#/components/schemas/ExecutionParametersHolder'
            lastExecuted:
              type: string
              format: date-time
    ExecutionParametersHolder:
      required:
        - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type
    PaginationResponseDynamicExecution:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/DynamicExecution'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    ServiceCanonicalName:
      type: object
      properties:
        id:
          type: string
        dynamicExecution:
          $ref: '#/components/schemas/DynamicExecution'
        serviceCanonicalName:
          type: string
    DynamicExecutionFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            methodNameLike:
              type: string
            serviceCanonicalNameLike:
              type: string
            executionParameterHolderCanonicalName:
              type: string
    ExportDynamicExecution:
      allOf:
        - $ref: '#/components/schemas/ExecuteDynamicExecution'
        - type: object
          properties:
            csvFormat:
              $ref: '#/components/schemas/CSVFormat'
            fieldToName:
              type: object
              additionalProperties:
                type: string
    CreateDynamicExecution:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        serviceCanonicalNames:
          uniqueItems: true
          type: array
          items:
            type: string
        methodName:
          type: string
        executionParametersHolder:
          $ref: '#/components/schemas/ExecutionParametersHolder'
    UpdateDynamicExecution:
      allOf:
        - $ref: '#/components/schemas/CreateDynamicExecution'
        - type: object
          properties:
            id:
              type: string
    ExecuteInvokerResponseObject:
      type: object
      properties:
        executed:
          type: boolean
        response:
          type: object
        invokerName:
          type: string
    ExecuteInvokersResponse:
      type: object
      properties:
        responses:
          type: array
          items:
            $ref: '#/components/schemas/ExecuteInvokerResponseObject'
    ExecuteInvokerRequest:
      type: object
      properties:
        executionParametersHolder:
          type: object
        invokerNames:
          uniqueItems: true
          type: array
          items:
            type: string
        invokerMethodName:
          type: string
        lastExecuted:
          type: string
          format: date-time
    DynamicExecutionExampleRequest:
      type: object
      properties:
        id:
          type: string
    ExecuteDynamicExecution:
      type: object
      properties:
        dynamicExecutionId:
          type: string
    InvokerInfo:
      type: object
      properties:
        description:
          type: string
        displayName:
          type: string
        methods:
          type: array
          items:
            $ref: '#/components/schemas/InvokerMethodInfo'
    InvokerMethodInfo:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        description:
          type: string
        displayName:
          type: string
        categories:
          uniqueItems: true
          type: array
          items:
            type: string
        relatedMethodNames:
          uniqueItems: true
          type: array
          items:
            type: string
        returnType:
          type: string
        parameterHolderType:
          type: string
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ParameterInfo'
    PaginationResponseInvokerInfo:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/InvokerInfo'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    InvokersFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            invokerTypes:
              uniqueItems: true
              type: array
              items:
                type: string
            invokerIds:
              uniqueItems: true
              type: array
              items:
                type: string
    Job:
      type: object
      properties:
        id:
          type: string
        currentPhasePrecentage:
          type: number
          format: float
        numberOfProcessors:
          type: integer
          format: int32
        jobInformation:
          $ref: '#/components/schemas/JobInformation'
        batchJobId:
          type: integer
          format: int64
        batchStatus:
          type: string
          enum:
            - COMPLETED
            - STARTING
            - STARTED
            - STOPPING
            - STOPPED
            - FAILED
            - ABANDONED
            - UNKNOWN
        history:
          type: array
          items:
            type: string
        retry:
          type: boolean
        retryTimes:
          type: integer
          format: int32
        retrySleepPeriod:
          type: integer
          format: int64
        entityIdToReturnToClient:
          type: string
        typeOfReturned:
          type: string
        currentPhase:
          type: string
    JobInformation:
      type: object
      properties:
        jobInfo:
          type: object
          writeOnly: true
        currrentPhaseResult:
          $ref: '#/components/schemas/Result'
    Result:
      type: object
      properties:
        succeeded:
          type: boolean
        error:
          type: string
        result:
          type: object
    FinalizeFileResourceResponse:
      type: object
      properties:
        fileResource:
          $ref: '#/components/schemas/FileResource'
        md5:
          type: string
        expectedMd5:
          type: string
        finalized:
          type: boolean
    FinallizeFileResource:
      type: object
      properties:
        fileResourceId:
          type: string
    HealthCheck:
      type: object
      properties:
        name:
          type: string
        state:
          type: string
          enum:
            - UP
            - DOWN
        data:
          type: object
          additionalProperties:
            type: object
    HealthStatusResponse:
      type: object
      properties:
        outcome:
          type: string
          enum:
            - UP
            - DOWN
        checks:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheck'
    RegisterForJobUpdates:
      type: object
      properties:
        jobId:
          type: string
        webSocketSessionId:
          type: string
    AccessRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
          enum:
            - deny
            - allow
    DynamicInvokerRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    OperationFiltering:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            auditable:
              type: boolean
            defaultaccess:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/AccessRef'
            dynamicInvokerIds:
              uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/DynamicInvokerRef'
    PermissionGroup:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties:
            externalId:
              type: string
    CreatePermissionGroupRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        externalId:
          type: string
    PermissionGroupCopy:
      allOf:
        - $ref: '#/components/schemas/CreatePermissionGroupRequest'
        - type: object
          properties:
            permissionGroupToCopyId:
              type: string
    UpdatePermissionGroup:
      allOf:
        - $ref: '#/components/schemas/CreatePermissionGroupRequest'
        - type: object
          properties:
            id:
              type: string
    PermissionGroupToBaseclass:
      allOf:
        - $ref: '#/components/schemas/Baselink'
        - type: object
          properties:
            permissionGroup:
              $ref: '#/components/schemas/PermissionGroup'
    CreatePermissionGroupLinkRequest:
      type: object
      properties:
        groupsIds:
          uniqueItems: true
          type: array
          items:
            type: string
        baseclassIds:
          uniqueItems: true
          type: array
          items:
            type: string
    PaginationResponsePermissionGroup:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/PermissionGroup'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    PermissionGroupsFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            baseclassIds:
              uniqueItems: true
              type: array
              items:
                type: string
            externalIds:
              uniqueItems: true
              type: array
              items:
                type: string
    ModuleManifest:
      type: object
      properties:
        uuid:
          type: string
        version:
          type: string
        loadedFrom:
          type: string
        originalModuleLocation:
          type: string
        requires:
          uniqueItems: true
          type: array
          items:
            type: string
        provides:
          uniqueItems: true
          type: array
          items:
            type: string
        pluginType:
          type: string
          enum:
            - Service
            - Model
            - Core
            - External
    Role:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties: {}
    PaginationResponseRole:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    RoleFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            names:
              uniqueItems: true
              type: array
              items:
                type: string
            usersIds:
              uniqueItems: true
              type: array
              items:
                type: string
    RoleCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
    RoleUpdate:
      allOf:
        - $ref: '#/components/schemas/RoleCreate'
        - type: object
          properties:
            id:
              type: string
    PaginationResponseRoleToUser:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/RoleToUser'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    RoleToUser:
      allOf:
        - $ref: '#/components/schemas/Baselink'
        - type: object
          properties:
            role:
              $ref: '#/components/schemas/Role'
            user:
              $ref: '#/components/schemas/User'
    User:
      allOf:
        - $ref: '#/components/schemas/Baseclass'
        - type: object
          properties:
            email:
              type: string
            homeDir:
              type: string
            surName:
              type: string
            disabled:
              type: boolean
            dateApproved:
              type: string
              format: date-time
            uiConfiguration:
              type: string
            lastVerificationDate:
              type: string
              format: date-time
            totpEnabled:
              type: boolean
            phoneNumber:
              type: string
          description: The basic entity for controlling access to system functions and objects
    RoleToUserFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            usersIds:
              uniqueItems: true
              type: array
              items:
                type: string
            rolesIds:
              uniqueItems: true
              type: array
              items:
                type: string
    RoleToUserUpdate:
      allOf:
        - $ref: '#/components/schemas/RoleToUserCreate'
        - type: object
          properties:
            id:
              type: string
    RoleToUserCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        userId:
          type: string
        roleId:
          type: string
      description: Used to create a RoleToUser connection
    PermissionSummaryEntry:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        explanation:
          type: object
          additionalProperties:
            type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleToUser'
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/TenantToUser'
        creator:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Baseclass'
        allowed:
          type: object
          additionalProperties:
            type: boolean
        userToBaseClasses:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/UserToBaseClass'
        roleToBaseclasses:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/RoleToBaseclass'
        tenantToBaseClassPremissions:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/TenantToBaseClassPremission'
        userToClazz:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/UserToBaseClass'
        roleToClazz:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/RoleToBaseclass'
        tenantToClazz:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/TenantToBaseClassPremission'
        userToPermissionGroup:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/UserToBaseClass'
        roleToPermissionGroup:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/RoleToBaseclass'
        tenantToPermissionGroup:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/TenantToBaseClassPremission'
    PermissionSummaryResponse:
      type: object
      properties:
        permissionGroupToBaseclasses:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/PermissionGroupToBaseclass'
        permissionSummaryEntries:
          type: array
          items:
            $ref: '#/components/schemas/PermissionSummaryEntry'
    RoleToBaseclass:
      allOf:
        - $ref: '#/components/schemas/Baselink'
        - type: object
          properties:
            baseclass:
              $ref: '#/components/schemas/Baseclass'
            role:
              $ref: '#/components/schemas/Role'
    TenantToBaseClassPremission:
      allOf:
        - $ref: '#/components/schemas/Baselink'
        - type: object
          properties:
            baseclass:
              $ref: '#/components/schemas/Baseclass'
    TenantToUser:
      allOf:
        - $ref: '#/components/schemas/Baselink'
        - type: object
          properties:
            defualtTennant:
              type: boolean
            user:
              $ref: '#/components/schemas/User'
    UserToBaseClass:
      allOf:
        - $ref: '#/components/schemas/Baselink'
        - type: object
          properties:
            baseclass:
              $ref: '#/components/schemas/Baseclass'
            user:
              $ref: '#/components/schemas/User'
    PermissionSummaryRequest:
      type: object
      properties:
        userIds:
          uniqueItems: true
          type: array
          items:
            type: string
        baseclassIds:
          uniqueItems: true
          type: array
          items:
            type: string
    TenantFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            apiKey:
              type: string
    PaginationResponseTenant:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/Tenant'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    TenantCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        tenantAdmin:
          $ref: '#/components/schemas/UserCreate'
        iconId:
          type: string
    UserCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
      description: used to create a user
    TenantUpdate:
      allOf:
        - $ref: '#/components/schemas/TenantCreate'
        - type: object
          properties:
            id:
              type: string
    PaginationResponseTenantToUser:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/TenantToUser'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    TenantToUserFilter:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties: {}
          description: Used to filter result set of TenantToUser
    TenantToUserCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        userId:
          type: string
        defaultTenant:
          type: boolean
      description: used to create a tenant to user connection
    TenantToUserUpdate:
      allOf:
        - $ref: '#/components/schemas/TenantToUserCreate'
        - type: object
          properties:
            id:
              type: string
    ResetPasswordResponse:
      type: object
      properties:
        sent:
          type: boolean
    ResetPasswordWithVerification:
      type: object
      properties:
        verification:
          type: string
          description: verification code received by external means (sms/mail)
        password:
          type: string
          description: new password
      description: Used to complete password reset process
    VerifyMailResponse:
      type: object
      properties:
        message:
          type: string
          description: human readable message
      description: contains verify status
    VerifyMail:
      type: object
      properties:
        verification:
          type: string
          description: verification code received by external process (sms/email)
      description: Used to finish mail/phone verification process
    TotpAuthenticationResponse:
      type: object
      properties:
        totpAuthenticationToken:
          type: string
    TotpAuthenticationRequest:
      type: object
      properties:
        code:
          type: string
    RecoverTotpRequest:
      type: object
      properties:
        recoveryCode:
          type: string
    SetupTotpResponse:
      type: object
      properties:
        secret:
          type: string
        base64QRCode:
          type: string
    FinishTotpSetupResponse:
      type: object
      properties:
        totpRecoveryCodes:
          type: array
          items:
            type: string
    FinishTotpSetupRequest:
      type: object
      properties:
        code:
          type: string
    ImpersonateResponse:
      type: object
      properties:
        authenticationKey:
          type: string
    ImpersonateRequest:
      type: object
      properties:
        creationTenantId:
          type: string
          description: tenant to create objects in
        readTenantsIds:
          uniqueItems: true
          type: array
          description: limit result set to the given tenants
          items:
            type: string
            description: limit result set to the given tenants
      description: used with the impersonate service
    UserProfile:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        tenant:
          $ref: '#/components/schemas/Tenant'
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/Tenant'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
      description: used to return user and default tenant
    UserProfileRequest:
      type: object
      description: Request for user's profile (empty)
    UserUpdate:
      allOf:
        - $ref: '#/components/schemas/UserCreate'
        - required:
            - id
          type: object
          properties:
            id:
              type: string
              description: id of the user to update
          description: used to update a user ,null/missing properties wont be updated
    ResetUserPasswordRequest:
      required:
        - email
      type: object
      properties:
        email:
          type: string
          description: user email to reset password for
        password:
          type: string
          description: password to use when resetting , will be used only when the user is being reset not via mail (for example if an admin is resetting it)
    PaginationResponseUser:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/User'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    UserFiltering:
      allOf:
        - $ref: '#/components/schemas/FilteringInformationHolder'
        - type: object
          properties:
            emails:
              uniqueItems: true
              type: array
              description: users with the given mails
              items:
                type: string
                description: users with the given mails
            phoneNumbers:
              uniqueItems: true
              type: array
              description: users with the given phone numbers
              items:
                type: string
                description: users with the given phone numbers
            lastNameLike:
              type: string
              description: 'users with last name "like" given string use % for wildcard '
            userIds:
              uniqueItems: true
              type: array
              description: users with specific ids
              items:
                type: string
                description: users with specific ids
            userTenantsIds:
              uniqueItems: true
              type: array
              description: users that belongs to the tenants that match the given ids
              items:
                type: string
                description: users that belongs to the tenants that match the given ids
          description: used to receive users filtered by the properties in this object. filtering will be with logical AND
    PaginationResponse:
      type: object
      properties:
        list:
          type: array
          items:
            type: object
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    IndustryFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        customerIds:
          uniqueItems: true
          type: array
          items:
            type: string
    Country:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        countryCode:
          type: string
        noSQL:
          type: boolean
    CountryCreationContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        countryCode:
          type: string
    ImportCountriesResponse:
      type: object
      properties:
        createdCountries:
          type: integer
          format: int32
        existingCountries:
          type: integer
          format: int32
    ImportCountriesRequest:
      type: object
    CountryFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    CountryUpdateContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        countryCode:
          type: string
        id:
          type: string
    Address:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        floorForAddress:
          type: integer
          format: int32
        street:
          $ref: '#/components/schemas/Street'
        neighbourhood:
          $ref: '#/components/schemas/Neighbourhood'
        zipCode:
          type: string
        number:
          type: integer
          format: int32
        externalId:
          type: string
        noSQL:
          type: boolean
    AirInfluenceParameters:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        shelf:
          $ref: '#/components/schemas/Shelf'
        compensationBytes:
          type: array
          items:
            type: string
            format: byte
        compensation:
          type: array
          items:
            type: number
            format: double
        noSQL:
          type: boolean
    ApiProvider:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        url:
          type: string
        username:
          type: string
        password:
          type: string
        noSQL:
          type: boolean
    BaseLockControllerConfiguration:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        image:
          $ref: '#/components/schemas/FileResource'
        diagram3D:
          $ref: '#/components/schemas/FileResource'
        noSQL:
          type: boolean
    Bay:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/FlexiCoreGateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        expectedNumberOfShelves:
          type: integer
          format: int32
        installationDate:
          type: string
          format: date-time
        healthCheckInterval:
          type: integer
          format: int64
        lastHealthData:
          type: string
        healthy:
          type: boolean
        lastHealthCheckDate:
          type: string
          format: date-time
        bayType:
          $ref: '#/components/schemas/BayType'
        port:
          type: integer
          format: int32
        simId:
          type: string
        bayIdForClient:
          type: string
        doorOpen:
          type: boolean
        unused:
          type: boolean
        bayStatus:
          type: string
          enum:
            - INACTIVE
            - ACTIVE
            - PENDING
        bayUIConfiguration:
          $ref: '#/components/schemas/BayUIConfiguration'
        internalIp:
          type: string
        defaultCurrency:
          $ref: '#/components/schemas/Currency'
        timeZoneId:
          type: string
        manualStart:
          type: boolean
        calculatedBayStatus:
          type: string
          enum:
            - PENDING
            - DISABLED
            - OFFLINE
            - ENABLED
            - INACTIVE
        dedicatedUser:
          $ref: '#/components/schemas/User'
        noSQL:
          type: boolean
    BayType:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        image:
          $ref: '#/components/schemas/FileResource'
        diagram3D:
          $ref: '#/components/schemas/FileResource'
        manualStart:
          type: boolean
        lockControllerConfiguration:
          $ref: '#/components/schemas/BaseLockControllerConfiguration'
        noSQL:
          type: boolean
    BayUIConfiguration:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        qrCode:
          $ref: '#/components/schemas/FileResource'
        supportPhone:
          type: string
        supportMail:
          type: string
        locale:
          $ref: '#/components/schemas/Locale'
        noSQL:
          type: boolean
    Building:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        noSQL:
          type: boolean
    BuildingFloor:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        floorNumber:
          type: integer
          format: int32
        building:
          $ref: '#/components/schemas/Building'
        diagram:
          $ref: '#/components/schemas/FileResource'
        diagram3D:
          $ref: '#/components/schemas/FileResource'
        noSQL:
          type: boolean
    City:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        country:
          $ref: '#/components/schemas/Country'
        state:
          $ref: '#/components/schemas/State'
        noSQL:
          type: boolean
    Currency:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    ExternalServer:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        url:
          type: string
        inspectIntervalMs:
          type: integer
          format: int64
        inspectAfterActivateIntervalMs:
          type: integer
          format: int64
        lastInspectAttempt:
          type: string
          format: date-time
        lastSuccessfulInspect:
          type: string
          format: date-time
        noSQL:
          type: boolean
    FlexiCoreGateway:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        lastSucessfulConnction:
          type: string
          format: date-time
        ip:
          type: string
        port:
          type: integer
          format: int32
        username:
          type: string
        flexiCoreServer:
          $ref: '#/components/schemas/FlexiCoreServer'
        noSQL:
          type: boolean
    FlexiCoreServer:
      required:
        - json-type-new
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        basePathApi:
          type: string
        webSocketPath:
          type: string
        externalId:
          type: string
        username:
          type: string
        enabled:
          type: boolean
        defaultRemoteServer:
          type: boolean
        priorityInGroup:
          type: integer
          format: int32
        healthCheckInterval:
          type: integer
          format: int64
        lastHealthData:
          type: string
        healthy:
          type: boolean
        serverGroup:
          $ref: '#/components/schemas/ServerGroup'
        noSQL:
          type: boolean
        json-type:
          type: string
        json-type-new:
          type: string
      discriminator:
        propertyName: json-type-new
    Gateway:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        lastSucessfulConnction:
          type: string
          format: date-time
        ip:
          type: string
        port:
          type: integer
          format: int32
        username:
          type: string
        noSQL:
          type: boolean
    Locale:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        localeCode:
          type: string
        noSQL:
          type: boolean
    Manufacturer:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        mainAddress:
          $ref: '#/components/schemas/Address'
        noSQL:
          type: boolean
    Model:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        weight:
          type: number
          format: double
        manufacturer:
          $ref: '#/components/schemas/Manufacturer'
        noSQL:
          type: boolean
    Neighbourhood:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        city:
          $ref: '#/components/schemas/City'
        noSQL:
          type: boolean
    ProductType:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        image:
          $ref: '#/components/schemas/FileResource'
        diagram3D:
          $ref: '#/components/schemas/FileResource'
        noSQL:
          type: boolean
    Room:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        centerX:
          type: number
          format: double
        centerY:
          type: number
          format: double
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        noSQL:
          type: boolean
    ServerGroup:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        basePathApi:
          type: string
        webSocketPath:
          type: string
        externalId:
          type: string
        username:
          type: string
        noSQL:
          type: boolean
    Shelf:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        ordinalTopToBottom:
          type: integer
          format: int32
        shelfType:
          $ref: '#/components/schemas/ShelfType'
        weightController:
          $ref: '#/components/schemas/WeightController'
        bay:
          $ref: '#/components/schemas/Bay'
        noSQL:
          type: boolean
    ShelfType:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        image:
          $ref: '#/components/schemas/FileResource'
        diagram3D:
          $ref: '#/components/schemas/FileResource'
        widthInMillimeters:
          type: number
          format: double
        depthInMillimeters:
          type: number
          format: double
        heightInMillimeters:
          type: number
          format: double
        noSQL:
          type: boolean
    State:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        country:
          $ref: '#/components/schemas/Country'
        noSQL:
          type: boolean
    Street:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        city:
          $ref: '#/components/schemas/City'
        noSQL:
          type: boolean
    WeightController:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        ip:
          type: string
        ordinal:
          type: integer
          format: int32
        port:
          type: integer
          format: int32
        shelf:
          $ref: '#/components/schemas/Shelf'
        useCrc:
          type: boolean
        useSerial:
          type: boolean
        serialConfiguration:
          type: string
        namePart:
          type: string
        comport:
          type: string
        weightControllerMacAddress:
          type: string
        noSQL:
          type: boolean
    AirInfluenceParametersUpdate:
      type: object
      properties:
        shelfId:
          type: string
        name:
          type: string
        compensation:
          type: array
          items:
            type: number
            format: double
        id:
          type: string
    AirInfluenceParametersCreate:
      type: object
      properties:
        shelfId:
          type: string
        name:
          type: string
        compensation:
          type: array
          items:
            type: number
            format: double
    AirInfluenceParametersFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        shelvesIds:
          uniqueItems: true
          type: array
          items:
            type: string
    Organization:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        mainAddress:
          $ref: '#/components/schemas/Address'
        noSQL:
          type: boolean
    Technician:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        email:
          type: string
        homeDir:
          type: string
        surName:
          type: string
        disabled:
          type: boolean
        dateApproved:
          type: string
          format: date-time
        uiConfiguration:
          type: string
        lastVerificationDate:
          type: string
          format: date-time
        totpEnabled:
          type: boolean
        phoneNumber:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        cardHash:
          type: string
        cardLastFour:
          type: string
        noSQL:
          type: boolean
    TechnicianCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        cardNumber:
          type: string
    TechnicianUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        cardNumber:
          type: string
        id:
          type: string
    TechnicianFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        active:
          type: boolean
        cardHash:
          type: string
    ModelUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        manufacturerId:
          type: string
        id:
          type: string
    ModelCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        manufacturerId:
          type: string
    ModelFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        manufacturersIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ConnectionTargetFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalId:
          type: string
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
    OpenTargetConnection:
      type: object
      properties:
        id:
          type: string
    SupplierFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    Supplier:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        mainAddress:
          $ref: '#/components/schemas/Address'
        supplierApi:
          $ref: '#/components/schemas/SupplierApi'
        noSQL:
          type: boolean
    SupplierApi:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        implementorCanonicalName:
          type: string
        noSQL:
          type: boolean
    SupplierUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        mainAddressId:
          type: string
        supplierApiId:
          type: string
        id:
          type: string
    SupplierCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        mainAddressId:
          type: string
        supplierApiId:
          type: string
    Discount:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        startingFromTotal:
          type: number
          format: double
        percentageDiscount:
          type: number
          format: double
        totalDiscount:
          type: number
          format: double
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        endpoint:
          $ref: '#/components/schemas/Endpoint'
        supplier:
          $ref: '#/components/schemas/Supplier'
        product:
          $ref: '#/components/schemas/Product'
        productType:
          $ref: '#/components/schemas/ProductType'
        shopper:
          $ref: '#/components/schemas/Shopper'
        organization:
          $ref: '#/components/schemas/Organization'
        customer:
          $ref: '#/components/schemas/ShekelCustomer'
        shopperType:
          $ref: '#/components/schemas/ShopperType'
        noSQL:
          type: boolean
    Endpoint:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/FlexiCoreGateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        noSQL:
          type: boolean
    Product:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        noSQL:
          type: boolean
    ShekelCustomer:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        mainAddress:
          $ref: '#/components/schemas/Address'
        noSQL:
          type: boolean
    Shopper:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        paymentMethodId:
          type: string
        credit:
          type: number
          format: double
        creditStartTime:
          type: string
          format: date-time
        creditEndTime:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        shopperType:
          $ref: '#/components/schemas/ShopperType'
        noSQL:
          type: boolean
    ShopperType:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    DiscountUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        startingFromTotal:
          type: number
          format: double
        percentageDiscount:
          type: number
          format: double
        totalDiscount:
          type: number
          format: double
        endpointId:
          type: string
        supplierId:
          type: string
        productId:
          type: string
        productTypeId:
          type: string
        shopperId:
          type: string
        organizationId:
          type: string
        shopperTypeId:
          type: string
        customerId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        setNulls:
          type: boolean
        id:
          type: string
    RefreshSyncLinks:
      type: object
      properties:
        customerToEndpointId:
          type: string
    DiscountCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        startingFromTotal:
          type: number
          format: double
        percentageDiscount:
          type: number
          format: double
        totalDiscount:
          type: number
          format: double
        endpointId:
          type: string
        supplierId:
          type: string
        productId:
          type: string
        productTypeId:
          type: string
        shopperId:
          type: string
        organizationId:
          type: string
        shopperTypeId:
          type: string
        customerId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    DiscountFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        supplierIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productTypeIds:
          uniqueItems: true
          type: array
          items:
            type: string
        shopperIds:
          uniqueItems: true
          type: array
          items:
            type: string
        organizationIds:
          uniqueItems: true
          type: array
          items:
            type: string
        shopperTypeIds:
          uniqueItems: true
          type: array
          items:
            type: string
        customersIds:
          uniqueItems: true
          type: array
          items:
            type: string
    BayToSupplyTime:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        bay:
          $ref: '#/components/schemas/Bay'
        supplyTime:
          $ref: '#/components/schemas/SupplyTime'
        noSQL:
          type: boolean
    SupplyTime:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        dayOfTheWeek:
          type: integer
          format: int32
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        noSQL:
          type: boolean
    CreateBayToSupplyTime:
      type: object
      properties:
        name:
          type: string
        bayId:
          type: string
        supplyTimeId:
          type: string
    UpdateBayToSupplyTime:
      type: object
      properties:
        name:
          type: string
        bayId:
          type: string
        supplyTimeId:
          type: string
        id:
          type: string
    BayToSupplyTimeFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        supplyTimeIds:
          uniqueItems: true
          type: array
          items:
            type: string
    TenantConfiguration:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        defaultCurrency:
          $ref: '#/components/schemas/Currency'
        locale:
          $ref: '#/components/schemas/Locale'
        bayUIConfiguration:
          $ref: '#/components/schemas/BayUIConfiguration'
        timeZoneId:
          type: string
        noSQL:
          type: boolean
    TenantConfigurationGet:
      type: object
      properties:
        tenantId:
          type: string
    TenantConfigurationCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        defaultCurrencyId:
          type: string
        localeId:
          type: string
        bayUIConfigurationId:
          type: string
        timeZoneId:
          type: string
        extraProperties:
          type: string
    TenantConfigurationUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        defaultCurrencyId:
          type: string
        localeId:
          type: string
        bayUIConfigurationId:
          type: string
        timeZoneId:
          type: string
        extraProperties:
          type: string
        id:
          type: string
    TenantConfigurationFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    ServerGroupUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        basePathApi:
          type: string
        webSocketPath:
          type: string
        username:
          type: string
        password:
          type: string
        id:
          type: string
    ServerGroupCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        basePathApi:
          type: string
        webSocketPath:
          type: string
        username:
          type: string
        password:
          type: string
    ServerGroupFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalId:
          type: string
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
    FeedbackResponse:
      type: object
      properties:
        status:
          type: string
        error:
          type: string
    FeedbackEventRequest:
      type: object
      properties:
        event_id:
          type: string
        transaction_id:
          type: string
        products_taken:
          type: array
          items:
            $ref: '#/components/schemas/ProductTaken'
    ProductTaken:
      type: object
      properties:
        sku:
          type: string
        quantity:
          type: integer
          format: int32
    FeedbackRequest:
      type: object
      properties:
        satisfaction:
          type: integer
          format: int32
        shopper_id:
          type: string
        entrance_time:
          type: integer
          format: int64
        exit_time:
          type: integer
          format: int64
        tenant_id:
          type: string
        site_id:
          type: string
        products_taken:
          type: array
          items:
            $ref: '#/components/schemas/ProductTaken'
    CategoryFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        names:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CategoryNameFiltering'
    CategoryNameFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    Category:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    CategoryUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        id:
          type: string
    CategoryCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
    LicensingProductFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        canonicalNames:
          uniqueItems: true
          type: array
          items:
            type: string
    ScaleEventFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        baseclassNoSQLType:
          type: string
        fromDateExclusive:
          type: boolean
        toDateExclusive:
          type: boolean
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        cartIds:
          uniqueItems: true
          type: array
          items:
            type: string
        userIds:
          uniqueItems: true
          type: array
          items:
            type: string
        userTypes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - STOCKER
              - CUSTOMER
    Distribution:
      type: object
      properties:
        maxValue:
          type: number
          format: double
        minValue:
          type: number
          format: double
        estimatedValue:
          type: number
          format: double
    PhysicalItem:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
        itemId:
          type: string
        internalId:
          type: string
        barcode:
          type: string
        weightDistribution:
          $ref: '#/components/schemas/Distribution'
        returnEventId:
          type: string
        ufo:
          type: boolean
    Planogram:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        planogramTemplate:
          $ref: '#/components/schemas/PlanogramTemplate'
        shelf:
          $ref: '#/components/schemas/Shelf'
        externalId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        planogramState:
          type: string
          enum:
            - PENDING
            - DISABLED
            - ACTIVE
        lockedByUser:
          $ref: '#/components/schemas/User'
        disabled:
          type: boolean
        lastRequiredGenerationDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    PlanogramElement:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        planogram:
          $ref: '#/components/schemas/Planogram'
        shekelProduct:
          $ref: '#/components/schemas/ShekelProduct'
        planogramTemplateElement:
          $ref: '#/components/schemas/PlanogramTemplateElement'
        horizontalFacings:
          type: integer
          format: int32
        verticalFacings:
          type: integer
          format: int32
        widthInMilliliters:
          type: number
          format: double
        orderLeftToRight:
          type: integer
          format: int32
        actualQuantity:
          type: integer
          format: int32
        recommendedQuantity:
          type: integer
          format: int32
        maxQuantity:
          type: integer
          format: int32
        misplaced:
          type: boolean
        enabled:
          type: boolean
        unknownQuantity:
          type: boolean
        ufo:
          $ref: '#/components/schemas/UFO'
        externalId:
          type: string
        sku:
          type: string
        noSQL:
          type: boolean
    PlanogramTemplate:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    PlanogramTemplateElement:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        product:
          $ref: '#/components/schemas/ShekelProduct'
        orderLeftToRight:
          type: integer
          format: int32
        planogramTemplate:
          $ref: '#/components/schemas/PlanogramTemplate'
        maxQuantity:
          type: integer
          format: int32
        horizontalFacings:
          type: integer
          format: int32
        verticalFacings:
          type: integer
          format: int32
        widthInMilliliters:
          type: number
          format: double
        noSQL:
          type: boolean
    ScaleEvent:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        dateCreated:
          type: string
          format: date-time
        name:
          type: string
        probabilities:
          type: array
          items:
            $ref: '#/components/schemas/TakePossibilities'
        cartId:
          type: string
        bayId:
          type: string
        bayExternalId:
          type: string
        bayType:
          type: string
        bayName:
          type: string
        selectedPossibilityId:
          type: string
        stabilityEvent:
          $ref: '#/components/schemas/StabilityEvent'
        userId:
          type: string
        userType:
          type: string
          enum:
            - STOCKER
            - CUSTOMER
        handogramaItems:
          type: array
          items:
            $ref: '#/components/schemas/PhysicalItem'
        relatedStabilityEvents:
          type: array
          items:
            $ref: '#/components/schemas/StabilityEvent'
        updateDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    ShekelProduct:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        widthInMillimeters:
          type: number
          format: double
        depthInMillimeters:
          type: number
          format: double
        heightInMillimeters:
          type: number
          format: double
        weightInGrams:
          type: number
          format: double
        category:
          type: string
        productImage:
          $ref: '#/components/schemas/FileResource'
        min:
          type: number
          format: double
        max:
          type: number
          format: double
        mean:
          type: number
          format: double
        std:
          type: number
          format: double
        resW:
          type: number
          format: double
        defaultPrice:
          type: number
          format: double
        quantityInCase:
          type: integer
          format: int32
        maxInShelf:
          type: integer
          format: int32
        lifeExpectancyString:
          type: string
        netWeightString:
          type: string
        defaultCost:
          type: number
          format: double
        kosher:
          type: string
        densityWeightDictionary:
          type: object
          additionalProperties:
            type: number
            format: double
        pureSamples:
          type: array
          items:
            type: number
            format: double
        pureSamplesAsString:
          type: string
        systemSamples:
          type: array
          items:
            type: number
            format: double
        systemSamplesAsString:
          type: string
        centers:
          type: array
          items:
            type: number
            format: double
        centersAsString:
          type: string
        radii:
          type: array
          items:
            type: number
            format: double
        radiiAsString:
          type: string
        probabilities:
          type: array
          items:
            type: number
            format: double
        probabilitiesAsString:
          type: string
        keysForMap:
          type: string
        valuesForMap:
          type: string
        noSQL:
          type: boolean
    StabilityEvent:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        dateCreated:
          type: string
          format: date-time
        name:
          type: string
        bkW:
          type: number
          format: double
        weight:
          type: number
          format: double
        location:
          type: number
          format: double
        measurementTimestamp:
          type: integer
          format: int64
        shelfId:
          type: string
        shelfOrdinal:
          type: integer
          format: int32
        cellLTR:
          type: integer
          format: int32
        lcs:
          type: object
          additionalProperties:
            type: array
            items:
              type: number
              format: double
        startLcsGr:
          type: array
          items:
            type: number
            format: double
        endLcsGr:
          type: array
          items:
            type: number
            format: double
        updateDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    TakeDetail:
      type: object
      properties:
        quantityTaken:
          type: integer
          format: int32
        planogramElement:
          $ref: '#/components/schemas/PlanogramElement'
        planogramElementId:
          type: string
        shekelProductId:
          type: string
        productSKU:
          type: string
        cellLTR:
          type: integer
          format: int32
        shelfOrdinal:
          type: integer
          format: int32
        relativeLocation:
          type: number
          format: double
        weightInGrams:
          type: number
          format: double
        std:
          type: number
          format: double
        identified:
          type: boolean
        misplaced:
          type: boolean
        misplacedItem:
          $ref: '#/components/schemas/ShekelProduct'
        id:
          type: string
        returnedId:
          type: string
    TakePossibilities:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        dateCreated:
          type: string
          format: date-time
        name:
          type: string
        productsTaken:
          type: array
          items:
            $ref: '#/components/schemas/TakeDetail'
        probability:
          type: number
          format: double
        scaleEventId:
          type: string
        selected:
          type: boolean
        shelfId:
          type: string
        cartId:
          type: string
        relativeLocation:
          type: number
          format: double
        weightInGrams:
          type: number
          format: double
        updateDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    UFO:
      type: object
      properties:
        id:
          type: string
        externalId:
          type: string
        weight:
          type: number
          format: double
    ProductsTakenUpdate:
      type: object
      properties:
        timeStamp:
          type: integer
          format: int64
        id:
          type: string
        probabilitiesToCreate:
          type: array
          items:
            $ref: '#/components/schemas/TakePossibilitiesCreate'
        existingPossibilityId:
          type: string
        encrypted:
          type: boolean
        associatedData:
          type: array
          items:
            type: string
            format: byte
    TakeDetailCreate:
      type: object
      properties:
        quantityTaken:
          type: integer
          format: int32
        misplaced:
          type: boolean
        weightInGrams:
          type: number
          format: float
        identified:
          type: boolean
        shekelProductId:
          type: string
        partitionLTR:
          type: integer
          format: int32
        planogramElementId:
          type: string
    TakePossibilitiesCreate:
      type: object
      properties:
        probability:
          type: number
          format: double
        timestamp:
          type: integer
          format: int64
        entries:
          type: array
          items:
            $ref: '#/components/schemas/TakeDetailCreate'
        select:
          type: boolean
    CategoryToClazzFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    CategoryToClazz:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/Category'
        baseclass:
          $ref: '#/components/schemas/Baseclass'
        noSQL:
          type: boolean
    CategoryToClazzCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        categoryId:
          type: string
        clazzId:
          type: string
        enabled:
          type: boolean
    CategoryToClazzUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        categoryId:
          type: string
        clazzId:
          type: string
        enabled:
          type: boolean
        id:
          type: string
    AddressExternalIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    AddressFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        floors:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FloorIdRef'
        streetsIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdRef'
        numbers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AptNumberRef'
        zipCodes:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ZipCodeIdRef'
        externalIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AddressExternalIdRef'
    AptNumberRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: integer
          format: int32
    FloorIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: integer
          format: int32
    StreetIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    ZipCodeIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    AddressUpdateContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        floor:
          type: integer
          format: int32
        streetId:
          type: string
        number:
          type: integer
          format: int32
        neighbourhoodId:
          type: string
        zipCode:
          type: string
        externalId:
          type: string
        id:
          type: string
    AddressImportResponse:
      type: object
      properties:
        ok:
          type: boolean
        createdStreet:
          type: integer
          format: int32
        createdCities:
          type: integer
          format: int32
        updatedStreet:
          type: integer
          format: int32
        updatedCities:
          type: integer
          format: int32
        unchangedStreet:
          type: integer
          format: int32
        unchangedCities:
          type: integer
          format: int32
        deletedStreet:
          type: integer
          format: int32
        deletedCities:
          type: integer
          format: int32
    AddressImportRequest:
      type: object
      properties:
        url:
          type: string
    AddressCreationContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        floor:
          type: integer
          format: int32
        streetId:
          type: string
        number:
          type: integer
          format: int32
        neighbourhoodId:
          type: string
        zipCode:
          type: string
        externalId:
          type: string
    AckedUserIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    BaseclassIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    BuildingFloorIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    EquipmentByStatusEntryIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    EquipmentExternalIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    EquipmentFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        productStatusIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProductStatusIdFiltering'
        excludeZeroLocation:
          type: boolean
        groupIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GroupIdFiltering'
        typesToReturnIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TypeToReturnFiltering'
        equipmentByStatusEntryIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentByStatusEntryIdFiltering'
        buildingFloorIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BuildingFloorIdFiltering'
        roomIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoomIdFiltering'
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        neighbourhoodIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodIdFiltering'
        streetIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdFiltering'
        gatewayIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayIdFiltering'
        externalServerIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalServerIdFiltering'
        equipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentIdFiltering'
        externalEquipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentExternalIdFiltering'
    EquipmentIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    EventFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        humanReadableTextLike:
          type: string
        eventType:
          type: string
        eventSubType:
          type: string
        baseclassIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BaseclassIdRef'
        clazzName:
          type: string
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        baseclassNameLike:
          type: string
        acked:
          type: boolean
        ackedUsersIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AckedUserIdRef'
        targetBaseclassIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TargetBaseclassIdRef'
        falseAlarm:
          type: boolean
    ExternalServerIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    GatewayIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    GroupIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    LocationArea:
      type: object
      properties:
        id:
          type: string
        equipmentFiltering:
          $ref: '#/components/schemas/EquipmentFiltering'
        lonStart:
          type: number
          format: double
        latStart:
          type: number
          format: double
        lonEnd:
          type: number
          format: double
        latEnd:
          type: number
          format: double
    NeighbourhoodIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    ProductStatusIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    ProductTypeIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    RoomIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    StreetIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    TargetBaseclassIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    TypeToReturnFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    AckEventsResponse:
      type: object
      properties:
        updated:
          type: integer
          format: int64
    AckEventsRequest:
      type: object
      properties:
        eventIds:
          uniqueItems: true
          type: array
          items:
            type: string
        ackNotes:
          type: string
        falseAlarm:
          type: boolean
    AggregationReport:
      type: object
      properties:
        result:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/AggregationReportEntry'
    AggregationReportEntry:
      type: object
      properties:
        productStatusId:
          type: string
        productTypeId:
          type: string
        productStatusName:
          type: string
        productTypeName:
          type: string
        tenantId:
          type: string
        tenantName:
          type: string
        count:
          type: integer
          format: int32
    CreateAggregatedReport:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        humanReadableTextLike:
          type: string
        eventType:
          type: string
        eventSubType:
          type: string
        baseclassIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BaseclassIdRef'
        clazzName:
          type: string
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        baseclassNameLike:
          type: string
        acked:
          type: boolean
        ackedUsersIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AckedUserIdRef'
        targetBaseclassIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TargetBaseclassIdRef'
        falseAlarm:
          type: boolean
        endTimes:
          uniqueItems: true
          type: array
          items:
            type: string
            format: date-time
        productStatus:
          uniqueItems: true
          type: array
          items:
            type: string
    EquipmentStatusEventFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        humanReadableTextLike:
          type: string
        eventType:
          type: string
        eventSubType:
          type: string
        baseclassIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BaseclassIdRef'
        clazzName:
          type: string
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        baseclassNameLike:
          type: string
        acked:
          type: boolean
        ackedUsersIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AckedUserIdRef'
        targetBaseclassIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TargetBaseclassIdRef'
        falseAlarm:
          type: boolean
    Employee:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        email:
          type: string
        homeDir:
          type: string
        surName:
          type: string
        disabled:
          type: boolean
        dateApproved:
          type: string
          format: date-time
        uiConfiguration:
          type: string
        lastVerificationDate:
          type: string
          format: date-time
        totpEnabled:
          type: boolean
        phoneNumber:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        noSQL:
          type: boolean
    EmployeeCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
    EmployeeUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        id:
          type: string
    EmployeeFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        emails:
          uniqueItems: true
          type: array
          description: users with the given mails
          items:
            type: string
            description: users with the given mails
        phoneNumbers:
          uniqueItems: true
          type: array
          description: users with the given phone numbers
          items:
            type: string
            description: users with the given phone numbers
        lastNameLike:
          type: string
          description: 'users with last name "like" given string use % for wildcard '
        userIds:
          uniqueItems: true
          type: array
          description: users with specific ids
          items:
            type: string
            description: users with specific ids
        userTenantsIds:
          uniqueItems: true
          type: array
          description: users that belongs to the tenants that match the given ids
          items:
            type: string
            description: users that belongs to the tenants that match the given ids
    WeightControllerConfiguration:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        image:
          $ref: '#/components/schemas/FileResource'
        diagram3D:
          $ref: '#/components/schemas/FileResource'
        controllerExternalId:
          type: string
        useCrc:
          type: boolean
        useSerial:
          type: boolean
        serialConfiguration:
          type: string
        namePart:
          type: string
        noSQL:
          type: boolean
    WeightControllerConfigurationCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        controllerExternalId:
          type: string
        useCrc:
          type: boolean
        useSerial:
          type: boolean
        serialConfiguration:
          type: string
        namePart:
          type: string
    WeightControllerConfigurationUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        controllerExternalId:
          type: string
        useCrc:
          type: boolean
        useSerial:
          type: boolean
        serialConfiguration:
          type: string
        namePart:
          type: string
        id:
          type: string
        weightControllerConfiguration:
          $ref: '#/components/schemas/WeightControllerConfiguration'
    WeightControllerConfigurationFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    PlanogramElementFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        missPlacedLocation:
          type: integer
          format: int32
        actualQuantity:
          type: integer
          format: int32
        planogramIds:
          uniqueItems: true
          type: array
          items:
            type: string
        planogramTemplateElementId:
          type: string
        shekelProductId:
          type: string
        misplaced:
          type: boolean
        ufo:
          type: boolean
        forDeletion:
          type: boolean
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
    PlanogramElementUpdate:
      type: object
      properties:
        missPlaced:
          type: boolean
        actualQuantity:
          type: integer
          format: int32
        maxQuantity:
          type: integer
          format: int32
        recommendedQuantity:
          type: integer
          format: int32
        planogramId:
          type: string
        ufoId:
          type: string
        shekelProductId:
          type: string
        horizontalFacings:
          type: integer
          format: int32
        verticalFacings:
          type: integer
          format: int32
        orderLeftToRight:
          type: integer
          format: int32
        widthInMillimeters:
          type: number
          format: double
        name:
          type: string
        description:
          type: string
        unknownQuantity:
          type: boolean
        externalId:
          type: string
        id:
          type: string
        quantityUpdateReason:
          type: string
          enum:
            - BAD_PRODUCT
            - TAKE
        shopperId:
          type: string
        autoUpdate:
          type: boolean
    PlanogramElementCreate:
      type: object
      properties:
        missPlaced:
          type: boolean
        actualQuantity:
          type: integer
          format: int32
        maxQuantity:
          type: integer
          format: int32
        recommendedQuantity:
          type: integer
          format: int32
        planogramId:
          type: string
        ufoId:
          type: string
        shekelProductId:
          type: string
        horizontalFacings:
          type: integer
          format: int32
        verticalFacings:
          type: integer
          format: int32
        orderLeftToRight:
          type: integer
          format: int32
        widthInMillimeters:
          type: number
          format: double
        name:
          type: string
        description:
          type: string
        unknownQuantity:
          type: boolean
        externalId:
          type: string
    PlanogramElementRecalculateRequest:
      type: object
      properties:
        planogramElementIds:
          uniqueItems: true
          type: array
          items:
            type: string
    Industry:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    IndustryCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
    IndustryUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        id:
          type: string
    StabilityEventCreate:
      type: object
      properties:
        name:
          type: string
        weight:
          type: number
          format: double
        location:
          type: number
          format: double
        measurementTimestamp:
          type: integer
          format: int64
        shelfId:
          type: string
    StatusLinksToImageFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        statusIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productTypeIds:
          uniqueItems: true
          type: array
          items:
            type: string
        statusLinkIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ProductTypeToProductStatus:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        noSQL:
          type: boolean
    StatusLinkToImage:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        image:
          $ref: '#/components/schemas/FileResource'
        statusLink:
          $ref: '#/components/schemas/ProductTypeToProductStatus'
        noSQL:
          type: boolean
    StatusLinksToImageCreate:
      type: object
      properties:
        name:
          type: string
        statusLinkId:
          type: string
        imageId:
          type: string
    StatusLinksToImageUpdate:
      type: object
      properties:
        name:
          type: string
        statusLinkId:
          type: string
        imageId:
          type: string
        id:
          type: string
    FixEventFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        baseclassNoSQLType:
          type: string
        fromDateExclusive:
          type: boolean
        toDateExclusive:
          type: boolean
        productsTakenEventIds:
          uniqueItems: true
          type: array
          items:
            type: string
    BayUIConfigurationCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        qrCodeFileResourceId:
          type: string
        supportPhone:
          type: string
        supportMail:
          type: string
        localeId:
          type: string
    BayUIConfigurationUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        qrCodeFileResourceId:
          type: string
        supportPhone:
          type: string
        supportMail:
          type: string
        localeId:
          type: string
        id:
          type: string
    BayUIConfigurationFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    Order:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        ordinal:
          type: integer
          format: int32
        orderSentDate:
          type: string
          format: date-time
        orderDate:
          type: string
          format: date-time
        consumingOrganization:
          $ref: '#/components/schemas/Organization'
        supplier:
          $ref: '#/components/schemas/Supplier'
        noSQL:
          type: boolean
    CreateOrder:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        externalId:
          type: string
        consumingOrganizationId:
          type: string
        supplierId:
          type: string
        orderDate:
          type: string
          format: date-time
        orderSentDate:
          type: string
          format: date-time
        ordinal:
          type: integer
          format: int32
    OrderFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        supplierIds:
          uniqueItems: true
          type: array
          items:
            type: string
        consumingOrganizationIds:
          uniqueItems: true
          type: array
          items:
            type: string
    UpdateOrder:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        externalId:
          type: string
        consumingOrganizationId:
          type: string
        supplierId:
          type: string
        orderDate:
          type: string
          format: date-time
        orderSentDate:
          type: string
          format: date-time
        ordinal:
          type: integer
          format: int32
        id:
          type: string
    LicensingFeatureFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        canonicalNames:
          uniqueItems: true
          type: array
          items:
            type: string
        licensingProductsIds:
          uniqueItems: true
          type: array
          items:
            type: string
    FlexiCoreServerToBaseclassFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        flexicoreServerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        serversExternalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        baseclassesId:
          uniqueItems: true
          type: array
          items:
            type: string
        unsynced:
          type: boolean
        lastSyncTime:
          type: string
          format: date-time
        remote:
          type: boolean
    ConnectionTarget:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        basePathApi:
          type: string
        webSocketPath:
          type: string
        externalId:
          type: string
        username:
          type: string
        noSQL:
          type: boolean
    FlexiCoreServerToNoSQLBaseclass:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        lastSync:
          type: string
          format: date-time
        syncCounter:
          type: integer
          format: int32
        leftside:
          $ref: '#/components/schemas/ConnectionTarget'
        forceUpdateOnSameDates:
          type: boolean
        noSQLBaseclassId:
          type: string
        noSQL:
          type: boolean
    FlexiCoreServerToBaseclassNoSQLCreate:
      type: object
      properties:
        flexicoreServerId:
          type: string
        serverGroupId:
          type: string
        forceCreate:
          type: boolean
        baseclassId:
          type: string
    SyncLinkFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        flexicoreServerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        serversExternalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        baseclassesId:
          uniqueItems: true
          type: array
          items:
            type: string
        unsynced:
          type: boolean
        lastSyncTime:
          type: string
          format: date-time
        remote:
          type: boolean
    FlexiCoreServerToBaseclass:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        lastSync:
          type: string
          format: date-time
        syncCounter:
          type: integer
          format: int32
        leftside:
          $ref: '#/components/schemas/ConnectionTarget'
        forceUpdateOnSameDates:
          type: boolean
        rightside:
          $ref: '#/components/schemas/Baseclass'
        noSQL:
          type: boolean
    FlexiCoreServerToBaseclassCreate:
      type: object
      properties:
        flexicoreServerId:
          type: string
        serverGroupId:
          type: string
        forceCreate:
          type: boolean
        baseclassId:
          type: string
    SoftwareUpdateInstallationFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        flexicoreServerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        softwareUpdateBundleIds:
          uniqueItems: true
          type: array
          items:
            type: string
        pendingToStart:
          type: boolean
        installationStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - STARTED
              - COMPLETED
              - FAILED
              - PENDING
    SoftwareUpdateBundle:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    SoftwareUpdateInstallation:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        softwareUpdateBundle:
          $ref: '#/components/schemas/SoftwareUpdateBundle'
        startInstallOn:
          type: string
          format: date-time
        installStart:
          type: string
          format: date-time
        installEnd:
          type: string
          format: date-time
        installationStatus:
          type: string
          enum:
            - STARTED
            - COMPLETED
            - FAILED
            - PENDING
        executionResult:
          $ref: '#/components/schemas/FileResource'
        flexiCoreServer:
          $ref: '#/components/schemas/FlexiCoreServer'
        integritySet:
          uniqueItems: true
          type: array
          items:
            type: string
        noSQL:
          type: boolean
    SoftwareUpdateInstallationCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        startInstallOn:
          type: string
          format: date-time
        softwareUpdateBundleId:
          type: string
        flexicoreServerId:
          type: string
    SoftwareUpdateInstallationUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        startInstallOn:
          type: string
          format: date-time
        softwareUpdateBundleId:
          type: string
        flexicoreServerId:
          type: string
        id:
          type: string
    BayWeightConfigurationEntry:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        ordinal:
          type: integer
          format: int32
        bayType:
          $ref: '#/components/schemas/BayType'
        shelfType:
          $ref: '#/components/schemas/ShelfType'
        weightControllerConfiguration:
          $ref: '#/components/schemas/WeightControllerConfiguration'
        noSQL:
          type: boolean
    BayWeightConfigurationEntryCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        ordinal:
          type: integer
          format: int32
        bayTypeId:
          type: string
        bayType:
          $ref: '#/components/schemas/BayType'
        shelfTypeId:
          type: string
        shelfType:
          $ref: '#/components/schemas/ShelfType'
        weightControllerConfigurationId:
          type: string
        weightControllerConfiguration:
          $ref: '#/components/schemas/WeightControllerConfiguration'
    BayWeightConfigurationEntryUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        ordinal:
          type: integer
          format: int32
        bayTypeId:
          type: string
        bayType:
          $ref: '#/components/schemas/BayType'
        shelfTypeId:
          type: string
        shelfType:
          $ref: '#/components/schemas/ShelfType'
        weightControllerConfigurationId:
          type: string
        weightControllerConfiguration:
          $ref: '#/components/schemas/WeightControllerConfiguration'
        id:
          type: string
        bayWeightConfigurationEntry:
          $ref: '#/components/schemas/BayWeightConfigurationEntry'
    BayWeightConfigurationEntryFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        ordinal:
          type: integer
          format: int32
        bayTypeIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bayTypes:
          type: array
          items:
            $ref: '#/components/schemas/BayType'
        shelfTypeIds:
          uniqueItems: true
          type: array
          items:
            type: string
        shelfTypes:
          type: array
          items:
            $ref: '#/components/schemas/ShelfType'
        weightControllerConfigurationIds:
          uniqueItems: true
          type: array
          items:
            type: string
        weightControllerConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/WeightControllerConfiguration'
    LicenseRequestToProductFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        licenseRequestIds:
          uniqueItems: true
          type: array
          items:
            type: string
        expirationDateAfter:
          type: string
          format: date-time
    LicenseRequest:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        macAddress:
          type: string
        diskSerialNumber:
          type: string
        externalHWSerialNumber:
          type: string
        signed:
          type: boolean
        license:
          $ref: '#/components/schemas/FileResource'
        requestFile:
          $ref: '#/components/schemas/FileResource'
        licensedTenant:
          $ref: '#/components/schemas/Tenant'
        noSQL:
          type: boolean
    LicenseRequestToProduct:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        granted:
          type: string
          format: date-time
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequest:
          $ref: '#/components/schemas/LicenseRequest'
        licensingEntity:
          $ref: '#/components/schemas/LicensingProduct'
        noSQL:
          type: boolean
    LicensingProduct:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        canonicalName:
          type: string
        noSQL:
          type: boolean
    LicenseRequestToProductCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequestId:
          type: string
        licensingProductId:
          type: string
    LicenseRequestToProductUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequestId:
          type: string
        licensingProductId:
          type: string
        id:
          type: string
    EventSource:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        username:
          type: string
        sourceBay:
          $ref: '#/components/schemas/Bay'
        targetBay:
          $ref: '#/components/schemas/Bay'
        noSQL:
          type: boolean
    EventSourceCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sourceBayId:
          type: string
        targetBayId:
          type: string
        username:
          type: string
        password:
          type: string
    EventSourceUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sourceBayId:
          type: string
        targetBayId:
          type: string
        username:
          type: string
        password:
          type: string
        id:
          type: string
    EventSourceFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        sourceBayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        targetBayIds:
          uniqueItems: true
          type: array
          items:
            type: string
    StateUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        countryId:
          type: string
        id:
          type: string
    CountryIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    StateFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        countriesIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CountryIdRef'
    StateCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        countryId:
          type: string
    NoSQLSyncLink:
      type: object
      properties:
        id:
          type: string
        collectionName:
          type: string
        flexiCoreServerId:
          type: string
        serverGroupId:
          type: string
        baseclassNoSQLType:
          type: string
        baseclassNoSQLId:
          type: string
        dateSynced:
          type: string
          format: date-time
    NoSQLSyncLinkCreate:
      type: object
      properties:
        flexiCoreServerId:
          type: string
        baseclassNoSQLId:
          type: string
        collectionName:
          type: string
        dateSynced:
          type: string
          format: date-time
    NoSQLSyncLinkFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        flexicoreServerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        baseclassNoSQLIds:
          uniqueItems: true
          type: array
          items:
            type: string
        rawServerId:
          type: boolean
        synced:
          type: boolean
    PriceList:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        endpoint:
          $ref: '#/components/schemas/Endpoint'
        supplier:
          $ref: '#/components/schemas/Supplier'
        shopper:
          $ref: '#/components/schemas/Shopper'
        organization:
          $ref: '#/components/schemas/Organization'
        customer:
          $ref: '#/components/schemas/ShekelCustomer'
        shopperType:
          $ref: '#/components/schemas/ShopperType'
        currency:
          $ref: '#/components/schemas/Currency'
        noSQL:
          type: boolean
    PriceListUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        endpointId:
          type: string
        supplierId:
          type: string
        shopperId:
          type: string
        organizationId:
          type: string
        shopperTypeId:
          type: string
        customerId:
          type: string
        currencyId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        externalId:
          type: string
        id:
          type: string
    PriceListCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        endpointId:
          type: string
        supplierId:
          type: string
        shopperId:
          type: string
        organizationId:
          type: string
        shopperTypeId:
          type: string
        customerId:
          type: string
        currencyId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        externalId:
          type: string
    ProductToPriceList:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        price:
          type: number
          format: double
        noSQL:
          type: boolean
    ProductToPriceListCreate:
      type: object
      properties:
        priceListId:
          type: string
        productId:
          type: string
        price:
          type: number
          format: double
    ProductToPriceListUpdate:
      type: object
      properties:
        price:
          type: number
          format: double
        id:
          type: string
    PriceListFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        shopperIds:
          uniqueItems: true
          type: array
          items:
            type: string
        organizationIds:
          uniqueItems: true
          type: array
          items:
            type: string
        shopperTypeIds:
          uniqueItems: true
          type: array
          items:
            type: string
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        customerIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ProductToPriceListFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        priceListIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
    OperatorFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
    Operator:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        mainAddress:
          $ref: '#/components/schemas/Address'
        externalId:
          type: string
        noSQL:
          type: boolean
    OperatorCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        mainAddressId:
          type: string
        externalId:
          type: string
    OperatorUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        mainAddressId:
          type: string
        externalId:
          type: string
        id:
          type: string
    OperatingUser:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        email:
          type: string
        homeDir:
          type: string
        surName:
          type: string
        disabled:
          type: boolean
        dateApproved:
          type: string
          format: date-time
        uiConfiguration:
          type: string
        lastVerificationDate:
          type: string
          format: date-time
        totpEnabled:
          type: boolean
        phoneNumber:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        cardHash:
          type: string
        cardLastFour:
          type: string
        noSQL:
          type: boolean
    OperatingUserToEndpointFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        operatingUsersIds:
          uniqueItems: true
          type: array
          items:
            type: string
        operatingUsers:
          type: array
          items:
            $ref: '#/components/schemas/OperatingUser'
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        active:
          type: boolean
        plannedVisitDay:
          type: integer
          format: int32
        allBaysLink:
          type: boolean
    Stocker:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        email:
          type: string
        homeDir:
          type: string
        surName:
          type: string
        disabled:
          type: boolean
        dateApproved:
          type: string
          format: date-time
        uiConfiguration:
          type: string
        lastVerificationDate:
          type: string
          format: date-time
        totpEnabled:
          type: boolean
        phoneNumber:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        cardHash:
          type: string
        cardLastFour:
          type: string
        noSQL:
          type: boolean
    StockerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        cardNumber:
          type: string
    StockerUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        cardNumber:
          type: string
        id:
          type: string
    OperatingUserToEndpoint:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        visitDayOfTheWeek:
          type: integer
          format: int32
        millisFromDayStart:
          type: integer
          format: int64
        noSQL:
          type: boolean
    OperatingUserToEndpointCreate:
      type: object
      properties:
        operatingUserId:
          type: string
        endpointId:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        visitDayOfTheWeek:
          type: integer
          format: int32
        visitMillisFromDayStart:
          type: integer
          format: int64
    OperatingUserToEndpointUpdate:
      type: object
      properties:
        id:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    StockerFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        active:
          type: boolean
        cardHash:
          type: string
    CustomerFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
    CustomerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
    CustomerUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        id:
          type: string
    SupplierToProduct:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        price:
          type: number
          format: double
        noSQL:
          type: boolean
    SupplierToProductCreate:
      type: object
      properties:
        supplierId:
          type: string
        productId:
          type: string
        price:
          type: number
          format: double
    SupplierToProductFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
        supplierIds:
          uniqueItems: true
          type: array
          items:
            type: string
    SupplierToProductUpdate:
      type: object
      properties:
        supplierId:
          type: string
        productId:
          type: string
        price:
          type: number
          format: double
        id:
          type: string
    Fridge:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/FlexiCoreGateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        expectedNumberOfShelves:
          type: integer
          format: int32
        installationDate:
          type: string
          format: date-time
        healthCheckInterval:
          type: integer
          format: int64
        lastHealthData:
          type: string
        healthy:
          type: boolean
        lastHealthCheckDate:
          type: string
          format: date-time
        bayType:
          $ref: '#/components/schemas/BayType'
        port:
          type: integer
          format: int32
        simId:
          type: string
        bayIdForClient:
          type: string
        doorOpen:
          type: boolean
        unused:
          type: boolean
        bayStatus:
          type: string
          enum:
            - INACTIVE
            - ACTIVE
            - PENDING
        bayUIConfiguration:
          $ref: '#/components/schemas/BayUIConfiguration'
        internalIp:
          type: string
        defaultCurrency:
          $ref: '#/components/schemas/Currency'
        timeZoneId:
          type: string
        manualStart:
          type: boolean
        calculatedBayStatus:
          type: string
          enum:
            - PENDING
            - DISABLED
            - OFFLINE
            - ENABLED
            - INACTIVE
        dedicatedUser:
          $ref: '#/components/schemas/User'
        noSQL:
          type: boolean
    FridgeUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        installationDate:
          type: string
          format: date-time
        expectedNumberOfShelves:
          type: integer
          format: int32
        healthCheckInterval:
          type: integer
          format: int64
        bayTypeId:
          type: string
        port:
          type: integer
          format: int32
        simId:
          type: string
        bayIdForClient:
          type: string
        bayStatus:
          type: string
          enum:
            - INACTIVE
            - ACTIVE
            - PENDING
        bayUIConfigurationId:
          type: string
        internalIp:
          type: string
        currencyId:
          type: string
        timeZoneId:
          type: string
        manualStart:
          type: boolean
        doorOpen:
          type: boolean
        id:
          type: string
    FridgeCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        installationDate:
          type: string
          format: date-time
        expectedNumberOfShelves:
          type: integer
          format: int32
        healthCheckInterval:
          type: integer
          format: int64
        bayTypeId:
          type: string
        port:
          type: integer
          format: int32
        simId:
          type: string
        bayIdForClient:
          type: string
        bayStatus:
          type: string
          enum:
            - INACTIVE
            - ACTIVE
            - PENDING
        bayUIConfigurationId:
          type: string
        internalIp:
          type: string
        currencyId:
          type: string
        timeZoneId:
          type: string
        manualStart:
          type: boolean
        doorOpen:
          type: boolean
    FridgeFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        productStatusIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProductStatusIdFiltering'
        excludeZeroLocation:
          type: boolean
        groupIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GroupIdFiltering'
        typesToReturnIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TypeToReturnFiltering'
        equipmentByStatusEntryIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentByStatusEntryIdFiltering'
        buildingFloorIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BuildingFloorIdFiltering'
        roomIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoomIdFiltering'
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        neighbourhoodIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodIdFiltering'
        streetIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdFiltering'
        gatewayIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayIdFiltering'
        externalServerIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalServerIdFiltering'
        equipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentIdFiltering'
        externalEquipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentExternalIdFiltering'
        ports:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        customerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        siteIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bayStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - INACTIVE
              - ACTIVE
              - PENDING
        healthy:
          type: boolean
        lastHealthCheckFrom:
          type: string
          format: date-time
        calculatedBayStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - PENDING
              - DISABLED
              - OFFLINE
              - ENABLED
              - INACTIVE
        doorOpen:
          type: boolean
    AnalysisStatusChange:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        dateCreated:
          type: string
          format: date-time
        name:
          type: string
        timeStamp:
          type: integer
          format: int64
        aggregationEntityId:
          type: string
        analysisStatus:
          type: string
          enum:
            - PREPARE
            - START
            - PREPARE_STOP
            - STOP
            - STABLE
        stocker:
          $ref: '#/components/schemas/Stocker'
        stockerId:
          type: string
        debugContext:
          type: string
        encrypted:
          type: boolean
        associatedData:
          type: array
          items:
            type: string
            format: byte
        updateDate:
          type: string
          format: date-time
        creationDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    ProductsTakenCreate:
      type: object
      properties:
        cartId:
          type: string
        shelfId:
          type: string
        productsTaken:
          type: array
          items:
            $ref: '#/components/schemas/TakeDetailContainer'
    TakeDetailContainer:
      type: object
      properties:
        quantityTaken:
          type: integer
          format: int32
        misplaced:
          type: boolean
        weightInGrams:
          type: number
          format: double
        identified:
          type: boolean
        shekelProductId:
          type: string
        planogramElementId:
          type: string
        sku:
          type: string
        shelfOrdinal:
          type: integer
          format: int32
        relativeLocation:
          type: number
          format: double
        std:
          type: number
          format: double
        id:
          type: string
        returnedId:
          type: string
        productImageId:
          type: string
        productName:
          type: string
    ShopperFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalId:
          type: string
        paymentMethodId:
          type: string
        userId:
          type: string
        shopperTypeId:
          type: string
    ShopperCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        shopperTypeId:
          type: string
        userId:
          type: string
        externalId:
          type: string
        credit:
          type: number
          format: double
        creditStartTime:
          type: string
          format: date-time
        creditEndTime:
          type: string
          format: date-time
    ShopperUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        shopperTypeId:
          type: string
        userId:
          type: string
        externalId:
          type: string
        credit:
          type: number
          format: double
        creditStartTime:
          type: string
          format: date-time
        creditEndTime:
          type: string
          format: date-time
        id:
          type: string
    UIComponentRegistrationContainer:
      required:
        - externalId
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        externalId:
          type: string
        groups:
          type: string
    UIComponentsRegistrationContainer:
      type: object
      properties:
        componentsToRegister:
          type: array
          items:
            $ref: '#/components/schemas/UIComponentRegistrationContainer'
    SoftwareUpdateFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    SoftwareUpdate:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        fileResource:
          $ref: '#/components/schemas/FileResource'
        softwareUpdateType:
          type: string
          enum:
            - GENERIC
            - PLUGIN
            - ENTITY
            - CORE
        noSQL:
          type: boolean
    SoftwareUpdateCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        fileResourceId:
          type: string
        softwareUpdateType:
          type: string
          enum:
            - GENERIC
            - PLUGIN
            - ENTITY
            - CORE
    SoftwareUpdateUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        fileResourceId:
          type: string
        softwareUpdateType:
          type: string
          enum:
            - GENERIC
            - PLUGIN
            - ENTITY
            - CORE
        id:
          type: string
    StreetCreationContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        cityId:
          type: string
    CityIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    NeighbourhoodIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    StreetFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdRef'
        citiesIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CityIdRef'
        neighbourhoodsIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodIdRef'
        countriesIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CountryIdRef'
    StreetUpdateContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        cityId:
          type: string
        id:
          type: string
    HealthReportFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        healthy:
          type: boolean
        flexicoreServerIds:
          uniqueItems: true
          type: array
          items:
            type: string
    HealthReportAggregationRequest:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        healthy:
          type: boolean
        flexicoreServerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        aggregationTimeUnit:
          type: string
          enum:
            - DAYS
            - WEEKS
            - MONTHS
            - YEARS
        aggregateByFlexiCoreServer:
          type: boolean
    SalesPersonFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        emails:
          uniqueItems: true
          type: array
          description: users with the given mails
          items:
            type: string
            description: users with the given mails
        phoneNumbers:
          uniqueItems: true
          type: array
          description: users with the given phone numbers
          items:
            type: string
            description: users with the given phone numbers
        lastNameLike:
          type: string
          description: 'users with last name "like" given string use % for wildcard '
        userIds:
          uniqueItems: true
          type: array
          description: users with specific ids
          items:
            type: string
            description: users with specific ids
        userTenantsIds:
          uniqueItems: true
          type: array
          description: users that belongs to the tenants that match the given ids
          items:
            type: string
            description: users that belongs to the tenants that match the given ids
        regionIds:
          uniqueItems: true
          type: array
          items:
            type: string
    SalesPerson:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        email:
          type: string
        homeDir:
          type: string
        surName:
          type: string
        disabled:
          type: boolean
        dateApproved:
          type: string
          format: date-time
        uiConfiguration:
          type: string
        lastVerificationDate:
          type: string
          format: date-time
        totpEnabled:
          type: boolean
        phoneNumber:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        noSQL:
          type: boolean
    SalesPersonCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
    SalesPersonUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        id:
          type: string
    SalesPersonToRegion:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        noSQL:
          type: boolean
    SalesPersonToRegionCreate:
      type: object
      properties:
        salesPersonId:
          type: string
        salesRegionId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    LicenseRequestToFeature:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        granted:
          type: string
          format: date-time
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequest:
          $ref: '#/components/schemas/LicenseRequest'
        licensingEntity:
          $ref: '#/components/schemas/LicensingFeature'
        noSQL:
          type: boolean
    LicensingFeature:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        canonicalName:
          type: string
        product:
          $ref: '#/components/schemas/LicensingProduct'
        noSQL:
          type: boolean
    LicenseRequestToFeatureCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequestId:
          type: string
        licensingFeatureId:
          type: string
    LicenseRequestToFeatureUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequestId:
          type: string
        licensingFeatureId:
          type: string
        id:
          type: string
    LicenseRequestToFeatureFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        licenseRequestIds:
          uniqueItems: true
          type: array
          items:
            type: string
        expirationDateAfter:
          type: string
          format: date-time
    LicenseRequestToQuantityFeature:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        granted:
          type: string
          format: date-time
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequest:
          $ref: '#/components/schemas/LicenseRequest'
        licensingEntity:
          $ref: '#/components/schemas/LicensingFeature'
        quantityLimit:
          type: integer
          format: int32
        noSQL:
          type: boolean
    LicenseRequestToQuantityFeatureCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequestId:
          type: string
        licensingFeatureId:
          type: string
        quantityLimit:
          type: integer
          format: int32
    LicenseRequestToQuantityFeatureUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        expiration:
          type: string
          format: date-time
        perpetual:
          type: boolean
        demo:
          type: boolean
        licenseRequestId:
          type: string
        licensingFeatureId:
          type: string
        quantityLimit:
          type: integer
          format: int32
        id:
          type: string
    LicenseRequestToQuantityFeatureFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        licenseRequestIds:
          uniqueItems: true
          type: array
          items:
            type: string
        expirationDateAfter:
          type: string
          format: date-time
    MassCopyProductsSummary:
      type: object
      properties:
        shekelProductsCopied:
          type: integer
          format: int32
        shekelProductsExisted:
          type: integer
          format: int32
        modelsCopied:
          type: integer
          format: int32
        modelsExisted:
          type: integer
          format: int32
        productTypesCopied:
          type: integer
          format: int32
        productTypesExisted:
          type: integer
          format: int32
        manufacturersCopied:
          type: integer
          format: int32
        manufacturersExisted:
          type: integer
          format: int32
        suppliersCopied:
          type: integer
          format: int32
        suppliersExisted:
          type: integer
          format: int32
        supplierLinksCopied:
          type: integer
          format: int32
        supplierLinksExisted:
          type: integer
          format: int32
    MassCopyProducts:
      type: object
      properties:
        shekelProductFiltering:
          $ref: '#/components/schemas/ShekelProductFiltering'
    ShekelProductFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        productStatusIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProductStatusIdFiltering'
        skus:
          uniqueItems: true
          type: array
          items:
            type: string
        skuLike:
          type: string
    ShekelProductCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        widthInMillimeters:
          type: number
          format: double
        depthInMillimeters:
          type: number
          format: double
        heightInMillimeters:
          type: number
          format: double
        weightInGrams:
          type: number
          format: double
        category:
          type: string
        defaultPrice:
          type: number
          format: double
        quantityInCase:
          type: integer
          format: int32
        kosher:
          type: string
        maxInShelf:
          type: integer
          format: int32
        lifeExpectancyString:
          type: string
        netWeightString:
          type: string
        defaultCost:
          type: number
          format: double
        imageId:
          type: string
        weightSamples:
          type: array
          items:
            type: number
            format: double
        systemSamples:
          type: array
          items:
            type: number
            format: double
        centers:
          type: array
          items:
            type: number
            format: double
        radii:
          type: array
          items:
            type: number
            format: double
        probabilities:
          type: array
          items:
            type: number
            format: double
        uniqueId:
          type: string
    ShekelProductUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        widthInMillimeters:
          type: number
          format: double
        depthInMillimeters:
          type: number
          format: double
        heightInMillimeters:
          type: number
          format: double
        weightInGrams:
          type: number
          format: double
        category:
          type: string
        defaultPrice:
          type: number
          format: double
        quantityInCase:
          type: integer
          format: int32
        kosher:
          type: string
        maxInShelf:
          type: integer
          format: int32
        lifeExpectancyString:
          type: string
        netWeightString:
          type: string
        defaultCost:
          type: number
          format: double
        imageId:
          type: string
        weightSamples:
          type: array
          items:
            type: number
            format: double
        systemSamples:
          type: array
          items:
            type: number
            format: double
        centers:
          type: array
          items:
            type: number
            format: double
        radii:
          type: array
          items:
            type: number
            format: double
        probabilities:
          type: array
          items:
            type: number
            format: double
        uniqueId:
          type: string
        id:
          type: string
    ExportProductsRequest:
      type: object
      properties:
        shekelProductFiltering:
          $ref: '#/components/schemas/ShekelProductFiltering'
    ImportProductsResponse:
      type: object
      properties:
        importEntries:
          type: array
          items:
            $ref: '#/components/schemas/ImportSummary'
    ImportSummary:
      type: object
      properties:
        name:
          type: string
        created:
          type: integer
          format: int32
        skipped:
          type: integer
          format: int32
    ImportProductsRequest:
      type: object
      properties:
        exportedZipId:
          type: string
    OperatingUserUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        cardNumber:
          type: string
        id:
          type: string
    OperatingUserFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        active:
          type: boolean
        cardHash:
          type: string
    OperatingUserCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        cardNumber:
          type: string
    OperatingUserAuditFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        operatingUserIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ArrangementParameterEventFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        baseclassNoSQLType:
          type: string
        fromDateExclusive:
          type: boolean
        toDateExclusive:
          type: boolean
        planogramsIds:
          uniqueItems: true
          type: array
          items:
            type: string
        excludePlanograms:
          type: boolean
    LocaleUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        localeCode:
          type: string
        id:
          type: string
    LocaleCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        localeCode:
          type: string
    LocaleFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    IndustryToCustomerFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        industriesIds:
          uniqueItems: true
          type: array
          items:
            type: string
        customerIds:
          uniqueItems: true
          type: array
          items:
            type: string
    Customer:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        lastLogin:
          type: string
          format: date-time
        noSQL:
          type: boolean
    IndustryToCustomer:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        industry:
          $ref: '#/components/schemas/Industry'
        customer:
          $ref: '#/components/schemas/Customer'
        noSQL:
          type: boolean
    IndustryToCustomerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        industryId:
          type: string
        customerId:
          type: string
    IndustryToCustomerUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        industryId:
          type: string
        customerId:
          type: string
        id:
          type: string
    LicenseRequestFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        relatedTenantsIds:
          uniqueItems: true
          type: array
          items:
            type: string
        signed:
          type: boolean
        expirationDateAfter:
          type: string
          format: date-time
    LicenseRequestCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        macAddress:
          type: string
        diskSerialNumber:
          type: string
        externalHWSerialNumber:
          type: string
        licenseId:
          type: string
        licensedTenantId:
          type: string
    LicenseRequestUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        macAddress:
          type: string
        diskSerialNumber:
          type: string
        externalHWSerialNumber:
          type: string
        licenseId:
          type: string
        licensedTenantId:
          type: string
        id:
          type: string
    PlanogramTemplateUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
    PlanogramTemplateFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    PlanogramTemplateCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    PlanogramTemplateToShelfType:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        noSQL:
          type: boolean
    PlanogramElementToShelfTypeCreate:
      type: object
      properties:
        planogramTemplateId:
          type: string
        shelfTypeId:
          type: string
    BayFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        productStatusIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProductStatusIdFiltering'
        excludeZeroLocation:
          type: boolean
        groupIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GroupIdFiltering'
        typesToReturnIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TypeToReturnFiltering'
        equipmentByStatusEntryIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentByStatusEntryIdFiltering'
        buildingFloorIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BuildingFloorIdFiltering'
        roomIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoomIdFiltering'
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        neighbourhoodIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodIdFiltering'
        streetIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdFiltering'
        gatewayIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayIdFiltering'
        externalServerIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalServerIdFiltering'
        equipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentIdFiltering'
        externalEquipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentExternalIdFiltering'
        ports:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        customerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        siteIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bayStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - INACTIVE
              - ACTIVE
              - PENDING
        healthy:
          type: boolean
        lastHealthCheckFrom:
          type: string
          format: date-time
        calculatedBayStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - PENDING
              - DISABLED
              - OFFLINE
              - ENABLED
              - INACTIVE
    SiteToEndpoint:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        noSQL:
          type: boolean
    SiteToEndpointCreate:
      type: object
      properties:
        bayId:
          type: string
        siteId:
          type: string
    OperatorToEndpoint:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        noSQL:
          type: boolean
    OperatorToEndpointCreate:
      type: object
      properties:
        bayId:
          type: string
        operatorId:
          type: string
    BayResyncResponse:
      type: object
      properties:
        updated:
          type: integer
          format: int32
    BayResyncRequest:
      type: object
      properties:
        bayId:
          type: string
    StockSummaryFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
        allDates:
          type: boolean
    CustomerToEndpointFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        customerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        active:
          type: boolean
    LinkSiteToBayResponse:
      type: object
      properties:
        flexiCoreServerToBaseclass:
          $ref: '#/components/schemas/FlexiCoreServerToBaseclass'
    LinkSiteToEndpointRequest:
      type: object
      properties:
        bayId:
          type: string
    BayCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        installationDate:
          type: string
          format: date-time
        expectedNumberOfShelves:
          type: integer
          format: int32
        healthCheckInterval:
          type: integer
          format: int64
        bayTypeId:
          type: string
        port:
          type: integer
          format: int32
        simId:
          type: string
        bayIdForClient:
          type: string
        bayStatus:
          type: string
          enum:
            - INACTIVE
            - ACTIVE
            - PENDING
        bayUIConfigurationId:
          type: string
        internalIp:
          type: string
        currencyId:
          type: string
        timeZoneId:
          type: string
        manualStart:
          type: boolean
    BayUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        installationDate:
          type: string
          format: date-time
        expectedNumberOfShelves:
          type: integer
          format: int32
        healthCheckInterval:
          type: integer
          format: int64
        bayTypeId:
          type: string
        port:
          type: integer
          format: int32
        simId:
          type: string
        bayIdForClient:
          type: string
        bayStatus:
          type: string
          enum:
            - INACTIVE
            - ACTIVE
            - PENDING
        bayUIConfigurationId:
          type: string
        internalIp:
          type: string
        currencyId:
          type: string
        timeZoneId:
          type: string
        manualStart:
          type: boolean
        id:
          type: string
    CustomerToEndpoint:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        noSQL:
          type: boolean
    CustomerToEndpointCreate:
      type: object
      properties:
        bayId:
          type: string
        customerId:
          type: string
    ShopperToEndpoint:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        noSQL:
          type: boolean
    ShopperToEndpointCreate:
      type: object
      properties:
        shopperId:
          type: string
        bayId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: double
    SetupBay:
      type: object
      properties:
        externalId:
          type: string
        name:
          type: string
        description:
          type: string
        siteId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        installationDate:
          type: string
          format: date-time
        expectedNumberOfShelves:
          type: integer
          format: int32
        bayTypeId:
          type: string
        port:
          type: integer
          format: int32
        simId:
          type: string
        bayIdForClient:
          type: string
        bayStatus:
          type: string
          enum:
            - INACTIVE
            - ACTIVE
            - PENDING
        bayUIConfigurationId:
          type: string
        internalIp:
          type: string
        currencyId:
          type: string
        timeZoneId:
          type: string
        manualStart:
          type: boolean
        unregisteredFlexiCoreServerExternalId:
          type: string
    RebootBayResponse:
      type: object
      properties:
        sent:
          type: boolean
    RebootBayRequest:
      type: object
      properties:
        bayId:
          type: string
    ResetMisplacedResponse:
      type: object
      properties:
        resetBays:
          type: array
          items:
            $ref: '#/components/schemas/ResetMisplacedResponseItem'
    ResetMisplacedResponseItem:
      type: object
      properties:
        bayId:
          type: string
        deletedPlanogramElements:
          type: integer
          format: int64
    ResetMisplacedRequest:
      type: object
      properties:
        sitesIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        shelfIds:
          uniqueItems: true
          type: array
          items:
            type: string
    CategoryToBaseClass:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        category:
          $ref: '#/components/schemas/Category'
        baseclass:
          $ref: '#/components/schemas/Baseclass'
        noSQL:
          type: boolean
    CategoryToBaseclassCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        categoryId:
          type: string
        baseclassId:
          type: string
        enabled:
          type: boolean
    CategoryToBaseclassUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        categoryId:
          type: string
        baseclassId:
          type: string
        enabled:
          type: boolean
        id:
          type: string
    CategoryToBaseclassFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    BayTypeUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        lockConfigurationId:
          type: string
        manualStart:
          type: boolean
        id:
          type: string
    BayTypeFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    BayTypeCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        lockConfigurationId:
          type: string
        manualStart:
          type: boolean
    PaymentMethod:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        shopper:
          $ref: '#/components/schemas/Shopper'
        priority:
          type: integer
          format: int32
        noSQL:
          type: boolean
    PaymentMethodCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        shopperId:
          type: string
        priority:
          type: integer
          format: int32
    PaymentMethodUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        shopperId:
          type: string
        priority:
          type: integer
          format: int32
        id:
          type: string
    PaymentMethodFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        shopperId:
          type: string
        priority:
          type: integer
          format: int32
    ArrangmentParametersFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        planogramsIds:
          uniqueItems: true
          type: array
          items:
            type: string
    GetActiveArrangementParameters:
      type: object
      properties:
        fake:
          type: boolean
    BranchFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        addressIds:
          uniqueItems: true
          type: array
          items:
            type: string
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        organizationIds:
          uniqueItems: true
          type: array
          items:
            type: string
    Branch:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        organization:
          $ref: '#/components/schemas/Organization'
        noSQL:
          type: boolean
    BranchCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        addressId:
          type: string
        externalId:
          type: string
        organizationId:
          type: string
    BranchUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        addressId:
          type: string
        externalId:
          type: string
        organizationId:
          type: string
        id:
          type: string
    OrderApiBayOrderIdFiltering:
      type: object
      properties:
        orderId:
          type: string
        orderApiConfigId:
          type: string
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bays:
          type: array
          items:
            $ref: '#/components/schemas/Bay'
    CreateShekelOrder:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        externalId:
          type: string
        consumingOrganizationId:
          type: string
        supplierId:
          type: string
        orderDate:
          type: string
          format: date-time
        orderSentDate:
          type: string
          format: date-time
        ordinal:
          type: integer
          format: int32
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ChangeOrdersState:
      type: object
      properties:
        ordersIds:
          uniqueItems: true
          type: array
          items:
            type: string
        orderState:
          type: string
          enum:
            - OPEN
            - CANCELLED
            - COMPLETED
    UpdateToBundleFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        softwareUpdatesIds:
          uniqueItems: true
          type: array
          items:
            type: string
        softwareUpdateBundleIds:
          uniqueItems: true
          type: array
          items:
            type: string
    UpdateToBundle:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        softwareUpdate:
          $ref: '#/components/schemas/SoftwareUpdate'
        softwareUpdateBundle:
          $ref: '#/components/schemas/SoftwareUpdateBundle'
        noSQL:
          type: boolean
    UpdateToBundleCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        softwareUpdateId:
          type: string
        softwareUpdateBundleId:
          type: string
    UpdateToBundleUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        softwareUpdateId:
          type: string
        softwareUpdateBundleId:
          type: string
        id:
          type: string
    FlexiCoreServerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        basePathApi:
          type: string
        webSocketPath:
          type: string
        username:
          type: string
        password:
          type: string
        enabled:
          type: boolean
        healthCheckInterval:
          type: integer
          format: int64
        serverGroupId:
          type: string
    FlexiCoreServerRegister:
      type: object
      properties:
        unregisteredFlexiCoreServerId:
          type: string
        healthCheckInterval:
          type: integer
          format: int64
    FlexiCoreServerUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        basePathApi:
          type: string
        webSocketPath:
          type: string
        username:
          type: string
        password:
          type: string
        enabled:
          type: boolean
        healthCheckInterval:
          type: integer
          format: int64
        serverGroupId:
          type: string
        id:
          type: string
    FlexiCoreServerFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalId:
          type: string
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        enable:
          type: boolean
        defaultRemoteServer:
          type: boolean
        serverGroupIds:
          uniqueItems: true
          type: array
          items:
            type: string
    CityCreationContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        countryId:
          type: string
        stateId:
          type: string
    CityFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        countriesIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CountryIdRef'
        statesIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StateIdRef'
    StateIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    CityUpdateContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        countryId:
          type: string
        stateId:
          type: string
        id:
          type: string
    ShopperTypeCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ShopperTypeFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    ShopperTypeUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
    AuditingFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        auditTypeLike:
          type: string
        userNameLike:
          type: string
        operationNameLike:
          type: string
        operationIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/OperatingIdRef'
        userIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/UserIdRef'
    OperatingIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    UserIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    ProductStatus:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        priority:
          type: integer
          format: int32
        noSQL:
          type: boolean
    ProductStatusCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Equipment:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        noSQL:
          type: boolean
    EquipmentUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        id:
          type: string
    UpdateProductType:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        diagram3DId:
          type: string
        iconId:
          type: string
        id:
          type: string
    UpdateProductStatusToType:
      type: object
      properties:
        productTypeId:
          type: string
        productStatusId:
          type: string
        iconId:
          type: string
    EnableEquipments:
      type: object
      properties:
        equipmentIds:
          uniqueItems: true
          type: array
          items:
            type: string
        enable:
          type: boolean
    LatLonContainer:
      type: object
      properties:
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
    MassUpsertLatLonRequest:
      type: object
      properties:
        multiLatLonEquipmentId:
          type: string
        list:
          type: array
          items:
            $ref: '#/components/schemas/LatLonContainer'
        contextString:
          type: string
    ProductTypeToProductStatusFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        statusIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productTypeIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ProductStatusToProductFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
    DetailedEquipmentFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        equipmentByStatusEntryIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ProductTypeFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        equipmentFiltering:
          $ref: '#/components/schemas/EquipmentFiltering'
    EquipmentGroupFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        productStatusIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProductStatusIdFiltering'
        excludeZeroLocation:
          type: boolean
        groupIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GroupIdFiltering'
        typesToReturnIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TypeToReturnFiltering'
        equipmentByStatusEntryIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentByStatusEntryIdFiltering'
        buildingFloorIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BuildingFloorIdFiltering'
        roomIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoomIdFiltering'
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        neighbourhoodIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodIdFiltering'
        streetIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdFiltering'
        gatewayIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayIdFiltering'
        externalServerIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalServerIdFiltering'
        equipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentIdFiltering'
        externalEquipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentExternalIdFiltering'
        precision:
          type: integer
          format: int32
    EquipmentCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
    EquipmentToGroup:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        noSQL:
          type: boolean
    LinkToGroup:
      type: object
      properties:
        equipmentId:
          type: string
        groupId:
          type: string
    LatLon:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        ordinal:
          type: integer
          format: int32
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        multiLatLonEquipment:
          $ref: '#/components/schemas/MultiLatLonEquipment'
        noSQL:
          type: boolean
    MultiLatLonEquipment:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        closedArea:
          type: boolean
        contextString:
          type: string
        noSQL:
          type: boolean
    UpdateLatLon:
      type: object
      properties:
        ordinal:
          type: integer
          format: int32
        contextString:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        multiLatLonEquipmentId:
          type: string
        softDelete:
          type: boolean
        id:
          type: string
        manualUpdateOrdinal:
          type: boolean
    ProductStatusFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        equipmentFiltering:
          $ref: '#/components/schemas/EquipmentFiltering'
    ProductTypeCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        diagram3DId:
          type: string
        iconId:
          type: string
    CreateLatLon:
      type: object
      properties:
        ordinal:
          type: integer
          format: int32
        contextString:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        multiLatLonEquipmentId:
          type: string
        softDelete:
          type: boolean
    LatLonFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        multiLatLonEquipmentIds:
          uniqueItems: true
          type: array
          items:
            type: string
    GatewayConsoleIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: integer
          format: int64
    GatewayFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        productStatusIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProductStatusIdFiltering'
        excludeZeroLocation:
          type: boolean
        groupIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GroupIdFiltering'
        typesToReturnIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TypeToReturnFiltering'
        equipmentByStatusEntryIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentByStatusEntryIdFiltering'
        buildingFloorIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BuildingFloorIdFiltering'
        roomIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoomIdFiltering'
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        neighbourhoodIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodIdFiltering'
        streetIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdFiltering'
        gatewayIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayIdFiltering'
        externalServerIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalServerIdFiltering'
        equipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentIdFiltering'
        externalEquipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentExternalIdFiltering'
        consoleIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayConsoleIdFiltering'
    EquipmentByStatusEntryFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        equipmentByStatusEventIdFilterings:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentByStatusEventIdFiltering'
    EquipmentByStatusEventIdFiltering:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    OrderItem:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        quantity:
          type: integer
          format: int32
        product:
          $ref: '#/components/schemas/Product'
        order:
          $ref: '#/components/schemas/Order'
        noSQL:
          type: boolean
    CreateOrderItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orderId:
          type: string
        productId:
          type: string
        quantity:
          type: integer
          format: int32
    UpdateOrderItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orderId:
          type: string
        productId:
          type: string
        quantity:
          type: integer
          format: int32
        id:
          type: string
    OrderItemFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        orderIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
    CreateSupplyTime:
      type: object
      properties:
        name:
          type: string
        dayOfTheWeek:
          type: integer
          format: int32
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
    SupplyTimeFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    UpdateSupplyTime:
      type: object
      properties:
        name:
          type: string
        dayOfTheWeek:
          type: integer
          format: int32
        hour:
          type: integer
          format: int32
        minute:
          type: integer
          format: int32
        second:
          type: integer
          format: int32
        id:
          type: string
    LockControllerFix:
      type: object
      properties:
        bayId:
          type: string
    DoorEventRequest:
      type: object
      properties:
        open:
          type: boolean
    LockControllerConfigurationCreate:
      required:
        - type
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type
    UnlockBayResponse:
      type: object
      properties:
        sent:
          type: boolean
    UnlockBayRequest:
      type: object
      properties:
        bayId:
          type: string
        stockerId:
          type: string
    LockControllerConfigurationFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        controllerExternalId:
          type: string
        ordinal:
          type: integer
          format: int32
        useCrc:
          type: boolean
        useSerial:
          type: boolean
        serialConfiguration:
          type: string
        namePart:
          type: string
    WeightControllerFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        enabled:
          type: boolean
        bay:
          $ref: '#/components/schemas/Bay'
    WeightControllerCreationContainer:
      type: object
      properties:
        ip:
          type: string
        macAddress:
          type: string
        ordinal:
          type: integer
          format: int32
        port:
          type: integer
          format: int32
        shelfId:
          type: string
        shelf:
          $ref: '#/components/schemas/Shelf'
        name:
          type: string
        disable:
          type: boolean
        useCRC:
          type: boolean
        namePart:
          type: string
        useSerial:
          type: boolean
        serialConfiguration:
          type: string
    WeightControllerUpdateContainer:
      type: object
      properties:
        ip:
          type: string
        macAddress:
          type: string
        ordinal:
          type: integer
          format: int32
        port:
          type: integer
          format: int32
        shelfId:
          type: string
        shelf:
          $ref: '#/components/schemas/Shelf'
        name:
          type: string
        disable:
          type: boolean
        useCRC:
          type: boolean
        namePart:
          type: string
        useSerial:
          type: boolean
        serialConfiguration:
          type: string
        id:
          type: string
        weightController:
          $ref: '#/components/schemas/WeightController'
    MockWeightRequest:
      type: object
      properties:
        shelfExternalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        shelves:
          type: array
          items:
            $ref: '#/components/schemas/Shelf'
    CurrencyUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        id:
          type: string
    CurrencyCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
    CurrencyFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    ImportCurrenciesResponse:
      type: object
      properties:
        currenciesCreated:
          type: integer
          format: int32
        currenciesUpdated:
          type: integer
          format: int32
        currenciesUnChanged:
          type: integer
          format: int32
    ImportCurrenciesRequest:
      type: object
    ShekelOrderItemFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        orderIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ShekelOrderItem:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        quantity:
          type: integer
          format: int32
        product:
          $ref: '#/components/schemas/Product'
        order:
          $ref: '#/components/schemas/Order'
        noSQL:
          type: boolean
    CreateShekelOrderItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orderId:
          type: string
        productId:
          type: string
        quantity:
          type: integer
          format: int32
    UpdateShekelOrderItem:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        orderId:
          type: string
        productId:
          type: string
        quantity:
          type: integer
          format: int32
        id:
          type: string
    BayToOrderItemFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        orderIds:
          uniqueItems: true
          type: array
          items:
            type: string
        orderItemIds:
          uniqueItems: true
          type: array
          items:
            type: string
        orderState:
          type: string
          enum:
            - OPEN
            - CANCELLED
            - COMPLETED
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
    BayToOrderItemContainer:
      type: object
      properties:
        id:
          type: string
        bayId:
          type: string
        orderItemId:
          type: string
        quantity:
          type: integer
          format: int32
        orderId:
          type: string
        orderState:
          type: string
          enum:
            - OPEN
            - CANCELLED
            - COMPLETED
    UpdateBayToOrderItem:
      type: object
      properties:
        bayId:
          type: string
        shekelOrderItemId:
          type: string
        quantity:
          type: integer
          format: int32
        orderState:
          type: string
          enum:
            - OPEN
            - CANCELLED
            - COMPLETED
        id:
          type: string
    CreateBayToOrderItem:
      type: object
      properties:
        bayId:
          type: string
        shekelOrderItemId:
          type: string
        quantity:
          type: integer
          format: int32
        orderState:
          type: string
          enum:
            - OPEN
            - CANCELLED
            - COMPLETED
    NeighbourhoodExternalIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    NeighbourhoodFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodExternalIdRef'
        citiesIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/CityIdRef'
    NeighbourhoodCreationContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        cityId:
          type: string
    NeighbourhoodUpdateContainer:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        cityId:
          type: string
        id:
          type: string
    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
        returnLink:
          type: string
    OrderApiConfig:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        supplier:
          $ref: '#/components/schemas/Supplier'
        host:
          type: string
        username:
          type: string
        password:
          type: string
        noSQL:
          type: boolean
    CreateOrderApiConfig:
      required:
        - type
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        supplierId:
          type: string
        host:
          type: string
        username:
          type: string
        password:
          type: string
        type:
          type: string
      discriminator:
        propertyName: type
    OrderApiConfigFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        supplierIds:
          uniqueItems: true
          type: array
          items:
            type: string
        orderApiConfigIds:
          uniqueItems: true
          type: array
          items:
            type: string
    UpdateOrderApiConfig:
      type: object
      properties:
        id:
          type: string
        createOrderApiConfig:
          $ref: '#/components/schemas/CreateOrderApiConfig'
    SendOrder:
      type: object
      properties:
        orderId:
          type: string
        orderApiConfigId:
          type: string
    EquipmentGroup:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        relatedPermissionGroup:
          $ref: '#/components/schemas/PermissionGroup'
        parent:
          $ref: '#/components/schemas/EquipmentGroup'
        noSQL:
          type: boolean
    GroupCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        parentId:
          type: string
        externalId:
          type: string
    GroupUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        parentId:
          type: string
        externalId:
          type: string
        id:
          type: string
    GroupFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        groupIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GroupIdFiltering'
        externalIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentExternalIdFiltering'
        equipmentIdFilterings:
          type: array
          items:
            $ref: '#/components/schemas/EquipmentIdFiltering'
    SendGridServer:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        sku:
          type: string
        model:
          $ref: '#/components/schemas/Model'
        productType:
          $ref: '#/components/schemas/ProductType'
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        serial:
          type: string
        externalId:
          type: string
        nameHe:
          type: string
        externalServer:
          $ref: '#/components/schemas/ExternalServer'
        buildingFloor:
          $ref: '#/components/schemas/BuildingFloor'
        room:
          $ref: '#/components/schemas/Room'
        geoHash1:
          type: string
        enable:
          type: boolean
        floorForEquipment:
          type: string
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        humanReadableLocation:
          type: string
        warrantyExpiration:
          type: string
          format: date-time
        address:
          $ref: '#/components/schemas/Address'
        communicationGateway:
          $ref: '#/components/schemas/Gateway'
        apiProvider:
          $ref: '#/components/schemas/ApiProvider'
        icon:
          $ref: '#/components/schemas/FileResource'
        descriptor3D:
          type: string
        url:
          type: string
        inspectIntervalMs:
          type: integer
          format: int64
        inspectAfterActivateIntervalMs:
          type: integer
          format: int64
        lastInspectAttempt:
          type: string
          format: date-time
        lastSuccessfulInspect:
          type: string
          format: date-time
        noSQL:
          type: boolean
    SendGridServerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        url:
          type: string
        inspectIntervalMs:
          type: integer
          format: int64
        inspectAfterActivateIntervalMs:
          type: integer
          format: int64
        apiKey:
          type: string
    SendGridServerUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        url:
          type: string
        inspectIntervalMs:
          type: integer
          format: int64
        inspectAfterActivateIntervalMs:
          type: integer
          format: int64
        apiKey:
          type: string
        id:
          type: string
    ApiKeyRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    SendGridServerFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        productStatusIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProductStatusIdFiltering'
        excludeZeroLocation:
          type: boolean
        groupIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GroupIdFiltering'
        typesToReturnIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TypeToReturnFiltering'
        equipmentByStatusEntryIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentByStatusEntryIdFiltering'
        buildingFloorIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BuildingFloorIdFiltering'
        roomIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoomIdFiltering'
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        neighbourhoodIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodIdFiltering'
        streetIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdFiltering'
        gatewayIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayIdFiltering'
        externalServerIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalServerIdFiltering'
        equipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentIdFiltering'
        externalEquipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentExternalIdFiltering'
        apiKeys:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ApiKeyRef'
    EquipmentLocationFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        baseclassNoSQLType:
          type: string
        fromDateExclusive:
          type: boolean
        toDateExclusive:
          type: boolean
    FlexiCoreGatewayUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        ip:
          type: string
        port:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        flexicoreServerId:
          type: string
        id:
          type: string
    FlexiCoreGatewayCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        ip:
          type: string
        port:
          type: integer
          format: int32
        username:
          type: string
        password:
          type: string
        flexicoreServerId:
          type: string
    FixMd5Response:
      type: object
      properties:
        fixed:
          type: integer
          format: int32
        skipped:
          type: integer
          format: int32
    SoftwareUpdateBundleCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
    SoftwareUpdateBundleUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        id:
          type: string
    SoftwareUpdateBundleFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    CartFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        paymentApprovalID:
          uniqueItems: true
          type: array
          items:
            type: string
        shopperIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        paid:
          type: boolean
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        cardLastFourDigits:
          type: string
        operatingUserIds:
          uniqueItems: true
          type: array
          items:
            type: string
        hasItems:
          type: boolean
        operatingUser:
          type: boolean
        overTotal:
          type: number
          format: double
        underTotal:
          type: number
          format: double
        transactionServices:
          uniqueItems: true
          type: array
          items:
            type: string
        cartIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bayStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - INACTIVE
              - ACTIVE
              - PENDING
        calculatedBayStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - PENDING
              - DISABLED
              - OFFLINE
              - ENABLED
              - INACTIVE
    GenerateInvoiceResponse:
      type: object
      properties:
        invoiceMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FileResource'
    GenerateInvoiceRequest:
      type: object
      properties:
        cartIds:
          uniqueItems: true
          type: array
          items:
            type: string
    CalculatedCartItem:
      type: object
      properties:
        cartItemId:
          type: string
        planogamElementId:
          type: string
        productCalculatedPrice:
          $ref: '#/components/schemas/ProductCalculatedPrice'
        amount:
          type: integer
          format: int32
    CalculatedCartResponse:
      type: object
      properties:
        cartItems:
          type: array
          items:
            $ref: '#/components/schemas/CalculatedCartItem'
    ProductCalculatedPrice:
      type: object
      properties:
        priceBeforeDiscount:
          type: number
          format: double
        priceAfterDiscount:
          type: number
          format: double
        discountId:
          type: string
        priceListId:
          type: string
        productId:
          type: string
        name:
          type: string
        sku:
          type: string
    CalculateCartRequest:
      type: object
      properties:
        id:
          type: string
    TransactionSummary:
      type: object
      properties:
        endpointId:
          type: string
        totalRevenue:
          type: number
          format: double
        numberOfTransactions:
          type: integer
          format: int64
        quantitySold:
          type: integer
          format: int64
        totalCost:
          type: number
          format: double
    TransactionsSummary:
      type: object
      properties:
        summeries:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSummary'
        summaries:
          $ref: '#/components/schemas/TransactionsSummary'
    TransactionSummaryPerTimeUnit:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
        totalSalesSum:
          type: number
          format: double
        totalCostSum:
          type: number
          format: double
        bayId:
          type: string
        numberOfTransactions:
          type: integer
          format: int64
    TransactionsSummaryPerTimeUnit:
      type: object
      properties:
        summaryList:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSummaryPerTimeUnit'
    TransactionsSummaryFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        paymentApprovalID:
          uniqueItems: true
          type: array
          items:
            type: string
        shopperIds:
          uniqueItems: true
          type: array
          items:
            type: string
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        paid:
          type: boolean
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        cardLastFourDigits:
          type: string
        operatingUserIds:
          uniqueItems: true
          type: array
          items:
            type: string
        hasItems:
          type: boolean
        operatingUser:
          type: boolean
        overTotal:
          type: number
          format: double
        underTotal:
          type: number
          format: double
        transactionServices:
          uniqueItems: true
          type: array
          items:
            type: string
        cartIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bayStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - INACTIVE
              - ACTIVE
              - PENDING
        calculatedBayStatuses:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - PENDING
              - DISABLED
              - OFFLINE
              - ENABLED
              - INACTIVE
        timeUnit:
          type: string
          enum:
            - DAYS
            - MONTHS
            - YEARS
            - HOURS
            - WEEKS
        groupByBays:
          type: boolean
    ProductSummary:
      type: object
      properties:
        bayId:
          type: string
        shekelProductId:
          type: string
        quantity:
          type: integer
          format: int32
        totalSum:
          type: number
          format: double
        totalCost:
          type: number
          format: double
        productName:
          type: string
    TransactionsSummaryPerProducts:
      type: object
      properties:
        productSummaries:
          type: array
          items:
            $ref: '#/components/schemas/ProductSummary'
    Cart:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        paymentApprovalId:
          type: string
        cardLastFourDigitsPlain:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        totalPaid:
          type: number
          format: double
        doorOpenDurationMilliseconds:
          type: integer
          format: int64
        paymentMethodUsed:
          $ref: '#/components/schemas/PaymentMethod'
        shopper:
          $ref: '#/components/schemas/Shopper'
        endpoint:
          $ref: '#/components/schemas/Endpoint'
        externalId:
          type: string
        charged:
          type: boolean
        stocker:
          $ref: '#/components/schemas/OperatingUser'
        paymentMethodCanonicalName:
          type: string
        noSQL:
          type: boolean
    CartCreate:
      type: object
      properties:
        name:
          type: string
        paymentApprovalId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        shopperId:
          type: string
        endpointId:
          type: string
        totalPaid:
          type: number
          format: double
        externalId:
          type: string
        doorOpenDurationMilliseconds:
          type: integer
          format: int64
        cardLastFourDigits:
          type: string
        paymentMethodCanonicalName:
          type: string
        stockerId:
          type: string
    CartUpdate:
      type: object
      properties:
        name:
          type: string
        paymentApprovalId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        shopperId:
          type: string
        endpointId:
          type: string
        totalPaid:
          type: number
          format: double
        externalId:
          type: string
        doorOpenDurationMilliseconds:
          type: integer
          format: int64
        cardLastFourDigits:
          type: string
        paymentMethodCanonicalName:
          type: string
        stockerId:
          type: string
        id:
          type: string
    BaysSummary:
      type: object
      properties:
        salesTotal:
          type: number
          format: double
        transactions:
          type: integer
          format: int64
        soldProducts:
          type: integer
          format: int32
        actualProductsQuantity:
          type: integer
          format: int32
        recommendedProductQuantity:
          type: integer
          format: int32
        endPoint:
          $ref: '#/components/schemas/Bay'
        site:
          $ref: '#/components/schemas/Site'
        customer:
          $ref: '#/components/schemas/ShekelCustomer'
        requiredProductsQuantity:
          type: integer
          format: int32
    BaysWithSummary:
      type: object
      properties:
        bayWithSummaries:
          $ref: '#/components/schemas/PaginationResponseBaysSummary'
    PaginationResponseBaysSummary:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/BaysSummary'
        totalRecords:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        startPage:
          type: integer
          format: int64
        endPage:
          type: integer
          format: int64
    Site:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        noSQL:
          type: boolean
    StockerLevelSummaryFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        groupByProduct:
          type: string
          enum:
            - PRODUCT
            - BAY
            - PRODUCT_AND_BAY
    ThisEndpointPricesResponse:
      type: object
      properties:
        list:
          type: array
          items:
            $ref: '#/components/schemas/ProductCalculatedPrice'
    getEndpointPrices:
      type: object
      properties:
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bayId:
          type: string
    CreditCardDetails:
      type: object
      properties:
        track1:
          type: string
        track2:
          type: string
        track3:
          type: string
        encodingType:
          type: string
          enum:
            - ISO_ABA
            - AAMVA
            - CADL
            - BLANK
            - OTHER
            - UNDETERMINED
            - NONE
    ValidationResponse:
      type: object
      properties:
        ok:
          type: boolean
        cardDetails:
          $ref: '#/components/schemas/CreditCardDetails'
        service:
          type: object
        lastFourDigits:
          type: string
        stocker:
          $ref: '#/components/schemas/Stocker'
        operatingUser:
          $ref: '#/components/schemas/OperatingUser'
    ChargeResponse:
      type: object
      properties:
        ok:
          type: boolean
        cardDetails:
          $ref: '#/components/schemas/CreditCardDetails'
        service:
          type: object
        actualChargeAmount:
          type: number
          format: double
        requestedChargeAmount:
          type: number
          format: double
        error:
          type: string
        errorCode:
          type: integer
          format: int32
        stocker:
          $ref: '#/components/schemas/Stocker'
        operatingUser:
          $ref: '#/components/schemas/OperatingUser'
    ShekelNotificationFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        bayLike:
          type: string
        includeCloud:
          type: boolean
        notificationTypes:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - FATAL
              - ERROR
              - WARNING
              - INFO
    ShelfUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        shelfTypeId:
          type: string
        bayId:
          type: string
        shelfExternalId:
          type: string
        ordinalTopToBottom:
          type: integer
          format: int32
        id:
          type: string
    ShelfCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        sku:
          type: string
        productTypeId:
          type: string
        clazzName:
          type: string
        modelId:
          type: string
        lat:
          type: number
          format: double
        lon:
          type: number
          format: double
        x:
          type: number
          format: double
        'y':
          type: number
          format: double
        warrantyExpiration:
          type: string
          format: date-time
        enable:
          type: boolean
        communicationGatewayId:
          type: string
        serial:
          type: string
        externalId:
          type: string
        externalServerId:
          type: string
        addressId:
          type: string
        descriptor3D:
          type: string
        roomId:
          type: string
        buildingFloorId:
          type: string
        shelfTypeId:
          type: string
        bayId:
          type: string
        shelfExternalId:
          type: string
        ordinalTopToBottom:
          type: integer
          format: int32
    ShelfFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productTypeId:
          $ref: '#/components/schemas/ProductTypeIdFiltering'
        productStatusIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ProductStatusIdFiltering'
        excludeZeroLocation:
          type: boolean
        groupIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GroupIdFiltering'
        typesToReturnIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TypeToReturnFiltering'
        equipmentByStatusEntryIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentByStatusEntryIdFiltering'
        buildingFloorIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BuildingFloorIdFiltering'
        roomIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/RoomIdFiltering'
        locationArea:
          $ref: '#/components/schemas/LocationArea'
        neighbourhoodIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/NeighbourhoodIdFiltering'
        streetIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/StreetIdFiltering'
        gatewayIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/GatewayIdFiltering'
        externalServerIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalServerIdFiltering'
        equipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentIdFiltering'
        externalEquipmentIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/EquipmentExternalIdFiltering'
        shelfTypeId:
          type: string
        bayId:
          type: string
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        enable:
          type: boolean
    DemoUserFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        active:
          type: boolean
        cardHash:
          type: string
    DemoUser:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        email:
          type: string
        homeDir:
          type: string
        surName:
          type: string
        disabled:
          type: boolean
        dateApproved:
          type: string
          format: date-time
        uiConfiguration:
          type: string
        lastVerificationDate:
          type: string
          format: date-time
        totpEnabled:
          type: boolean
        phoneNumber:
          type: string
        organization:
          $ref: '#/components/schemas/Organization'
        cardHash:
          type: string
        cardLastFour:
          type: string
        noSQL:
          type: boolean
    DemoUserCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        cardNumber:
          type: string
    DemoUserUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        email:
          type: string
        lastName:
          type: string
        password:
          type: string
        phoneNumber:
          type: string
        uiConfiguration:
          type: string
        cardNumber:
          type: string
        id:
          type: string
    FacadeBayFiltering:
      type: object
      properties:
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
        currentPage:
          type: integer
          format: int32
    GetMisplacedResponse:
      type: object
      properties:
        misplacedProducts:
          type: array
          items:
            $ref: '#/components/schemas/MisplacedItem'
        misplacedItems:
          type: array
          writeOnly: true
          items:
            $ref: '#/components/schemas/MisplacedItem'
    ItemLocation:
      type: object
      properties:
        bayExternalId:
          type: string
        shelfId:
          type: string
        shelfOrdinal:
          type: integer
          format: int32
        cellOrdinal:
          type: integer
          format: int32
    MisplacedItem:
      type: object
      properties:
        productId:
          type: string
        sku:
          type: string
        quantity:
          type: integer
          format: int32
        currentLocation:
          $ref: '#/components/schemas/ItemLocation'
        originalLocation:
          $ref: '#/components/schemas/ItemLocation'
    GetMisplacedRequest:
      type: object
      properties:
        baysExternalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        siteExternalId:
          type: string
    ActivatePlanogramRequest:
      type: object
      properties:
        bayId:
          type: string
        shelfOrdinal:
          type: integer
          format: int32
    CreatePlanogramElement:
      type: object
      properties:
        sku:
          type: string
        widthInMillimeter:
          type: number
          format: double
        weightSamplesInGram:
          type: array
          items:
            type: number
            format: double
    CreatePlanogramRequest:
      type: object
      properties:
        bayId:
          type: string
        shelfOrdinal:
          type: integer
          format: int32
        active:
          type: boolean
        elementsLTR:
          type: array
          items:
            $ref: '#/components/schemas/CreatePlanogramElement'
    SendGridTemplate:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        sendGridServer:
          $ref: '#/components/schemas/SendGridServer'
        noSQL:
          type: boolean
    SendGridTemplateCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
    SendGridTemplateUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        id:
          type: string
    ExternalTemplateIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    SendGridServerIdRef:
      type: object
      properties:
        filterId:
          type: string
        id:
          type: string
    SendGridTemplateFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalTemplateIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/ExternalTemplateIdRef'
        sendGridServerIds:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SendGridServerIdRef'
    CartItem:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        shekelProduct:
          $ref: '#/components/schemas/ShekelProduct'
        cart:
          $ref: '#/components/schemas/Cart'
        quantityTaken:
          type: integer
          format: int32
        priceAtTheTimeOfPurchase:
          type: number
          format: double
        planogramElementId:
          type: string
        takeProbability:
          type: number
          format: double
        noSQL:
          type: boolean
    CartItemUpdate:
      type: object
      properties:
        productId:
          type: string
        cartId:
          type: string
        quantityTaken:
          type: integer
          format: int32
        priceAtTheTimeOfPurchase:
          type: number
          format: double
        name:
          type: string
        planogramElementId:
          type: string
        takeProbability:
          type: number
          format: double
        id:
          type: string
    CartItemFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productIds:
          uniqueItems: true
          type: array
          items:
            type: string
        cartIds:
          uniqueItems: true
          type: array
          items:
            type: string
    CartItemCreate:
      type: object
      properties:
        productId:
          type: string
        cartId:
          type: string
        quantityTaken:
          type: integer
          format: int32
        priceAtTheTimeOfPurchase:
          type: number
          format: double
        name:
          type: string
        planogramElementId:
          type: string
        takeProbability:
          type: number
          format: double
    BayScreenShot:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        image:
          $ref: '#/components/schemas/FileResource'
        bay:
          $ref: '#/components/schemas/Bay'
        dateReceived:
          type: string
          format: date-time
        noSQL:
          type: boolean
    BayScreenShotCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        bayId:
          type: string
        imageId:
          type: string
        dateReceived:
          type: string
          format: date-time
    BayScreenShotUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        bayId:
          type: string
        imageId:
          type: string
        dateReceived:
          type: string
          format: date-time
        id:
          type: string
    BayScreenShotFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        bayIds:
          uniqueItems: true
          type: array
          items:
            type: string
    TakeScreenShotResponse:
      type: object
      properties:
        sent:
          type: boolean
    TakeScreenShotRequest:
      type: object
      properties:
        bayId:
          type: string
    CustomerDocumentFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        customerIds:
          uniqueItems: true
          type: array
          items:
            type: string
    CustomerDocument:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        fileResource:
          $ref: '#/components/schemas/FileResource'
        customer:
          $ref: '#/components/schemas/Customer'
        noSQL:
          type: boolean
    CustomerDocumentCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        fileResourceId:
          type: string
        customerId:
          type: string
    CustomerDocumentUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        fileResourceId:
          type: string
        customerId:
          type: string
        id:
          type: string
    OrganizationalCustomer:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        lastLogin:
          type: string
          format: date-time
        organization:
          $ref: '#/components/schemas/Organization'
        noSQL:
          type: boolean
    OrganizationalCustomerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        organizationId:
          type: string
    OrganizationalCustomerUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        organizationId:
          type: string
        id:
          type: string
    OrganizationalCustomerFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        organizationIds:
          uniqueItems: true
          type: array
          items:
            type: string
    UnRegisteredFlexiCoreServer:
      required:
        - new-type
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        designatedAutoSShPort:
          type: integer
          format: int32
        relatedUser:
          $ref: '#/components/schemas/User'
        type:
          type: string
        noSQL:
          type: boolean
        new-type:
          type: string
      discriminator:
        propertyName: new-type
    UnRegisteredFlexiCoreServerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        externalId:
          type: string
        userCreate:
          $ref: '#/components/schemas/UserCreate'
        allocateAutoSSHPort:
          type: boolean
    PlanogramUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        planogramTemplateId:
          type: string
        shelfId:
          type: string
        externalId:
          type: string
        planogramState:
          type: string
          enum:
            - PENDING
            - DISABLED
            - ACTIVE
        locked:
          type: boolean
        lastRequiredGenerationDate:
          type: string
          format: date-time
        id:
          type: string
    PlanogramFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        operatorIds:
          uniqueItems: true
          type: array
          items:
            type: string
        stockerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        customerIds:
          uniqueItems: true
          type: array
          items:
            type: string
        siteIds:
          uniqueItems: true
          type: array
          items:
            type: string
        shelfIds:
          uniqueItems: true
          type: array
          items:
            type: string
        baysIds:
          uniqueItems: true
          type: array
          items:
            type: string
        planogramTemplateId:
          type: string
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
        withinDate:
          type: string
          format: date-time
        raw:
          type: boolean
        planogramStates:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
              - PENDING
              - DISABLED
              - ACTIVE
    MisplacedElementsDelete:
      type: object
      properties:
        planogramIds:
          uniqueItems: true
          type: array
          items:
            type: string
    MissingProductResponse:
      type: object
      properties:
        shekelProduct:
          $ref: '#/components/schemas/ShekelProduct'
        missingQuantity:
          type: integer
          format: int32
        orderLeftToRight:
          type: integer
          format: int32
    MissingProductsByPlanogramsResponse:
      type: object
      properties:
        missingProducts:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/MissingProductResponse'
    MissingProductsRequests:
      type: object
      properties:
        planogramIds:
          uniqueItems: true
          type: array
          items:
            type: string
        supplierId:
          type: string
    PlanogramCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        planogramTemplateId:
          type: string
        shelfId:
          type: string
        externalId:
          type: string
        planogramState:
          type: string
          enum:
            - PENDING
            - DISABLED
            - ACTIVE
        locked:
          type: boolean
        lastRequiredGenerationDate:
          type: string
          format: date-time
    PlanogramMassCreate:
      type: object
      properties:
        planogramCreate:
          $ref: '#/components/schemas/PlanogramCreate'
        shelfIds:
          uniqueItems: true
          type: array
          items:
            type: string
    MissingProductsResponse:
      type: object
      properties:
        productToQuantityMissing:
          type: object
          additionalProperties:
            type: integer
            format: int32
    PlanogramCopy:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        planogramTemplateId:
          type: string
        shelfId:
          type: string
        externalId:
          type: string
        planogramState:
          type: string
          enum:
            - PENDING
            - DISABLED
            - ACTIVE
        locked:
          type: boolean
        lastRequiredGenerationDate:
          type: string
          format: date-time
        planogramId:
          type: string
    PlanogramDescriptor:
      type: object
      properties:
        ordinalTopToBottom:
          type: integer
          format: int32
        shelfExternalId:
          type: string
        planogramCreate:
          $ref: '#/components/schemas/PlanogramCreate'
        planogramElementCreate:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/PlanogramElementCreate'
    UnlinkConfigurationToEndpointRequest:
      type: object
      properties:
        transactionConfigurationId:
          type: string
        endpointId:
          type: string
    TransactionServiceConfiguration:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        amountToValidate:
          type: number
          format: double
        noSQL:
          type: boolean
    CreateConfigurationRequest:
      required:
        - type
      type: object
      properties:
        name:
          type: string
        amountToValidate:
          type: number
          format: double
        type:
          type: string
      discriminator:
        propertyName: type
    UpdateConfigurationRequest:
      type: object
      properties:
        id:
          type: string
        createConfigurationRequest:
          $ref: '#/components/schemas/CreateConfigurationRequest'
    ConfigurationToEndpoint:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        rightside:
          $ref: '#/components/schemas/Endpoint'
        leftside:
          $ref: '#/components/schemas/TransactionServiceConfiguration'
        simplevalue:
          type: string
        value:
          $ref: '#/components/schemas/Baseclass'
        enabled:
          type: boolean
        noSQL:
          type: boolean
    UpdateConfigurationToEndpointRequest:
      type: object
      properties:
        transactionConfigurationId:
          type: string
        endpointId:
          type: string
        enable:
          type: boolean
        configurationToEndpointId:
          type: string
    CreateConfigurationToEndpointRequest:
      type: object
      properties:
        transactionConfigurationId:
          type: string
        endpointId:
          type: string
        enable:
          type: boolean
    TransactionServiceConfigurationFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        endpointIds:
          uniqueItems: true
          type: array
          items:
            type: string
        activeEndpointsLinks:
          type: boolean
        transactionServiceConfigurationIds:
          uniqueItems: true
          type: array
          items:
            type: string
    ManufacturerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    ManufacturerFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    ManufacturerUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
    IndividualCustomer:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        externalId:
          type: string
        lastLogin:
          type: string
          format: date-time
        noSQL:
          type: boolean
    IndividualCustomerCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
    IndividualCustomerUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tenantId:
          type: string
        softDelete:
          type: boolean
        externalId:
          type: string
        id:
          type: string
    IndividualCustomerFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
    SiteFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        addressIds:
          uniqueItems: true
          type: array
          items:
            type: string
        externalIds:
          uniqueItems: true
          type: array
          items:
            type: string
    SiteCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        addressId:
          type: string
        externalId:
          type: string
    SiteUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        addressId:
          type: string
        externalId:
          type: string
        id:
          type: string
    WatchDogKeepAlive:
      type: object
      properties:
        serviceUniqueId:
          type: string
    UnRegisteredFlexiCoreServerFilter:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        externalIds:
          uniqueItems: true
          type: array
          description: unregister flexicore servers with the given external ids
          items:
            type: string
            description: unregister flexicore servers with the given external ids
      description: Used to filter UnRegistedFlexiCoreServerFilter
    SalesRegionFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
    SalesRegion:
      type: object
      properties:
        softDelete:
          type: boolean
        dtype:
          type: string
        id:
          type: string
        name:
          maxLength: 255
          minLength: 0
          type: string
        description:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
        systemObject:
          type: boolean
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        noSQL:
          type: boolean
    SalesRegionCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    SalesRegionUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
    OpenBasketResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - OK
            - NO_SUCH_BASKET
            - BASKET_ALREADY_OPENED
            - NO_SUCH_EVENT
            - NO_SUCH_PLANOGRAM_ELEMENT
            - NO_SUCH_SHEKEL_PRODUCT
        success:
          type: boolean
        basketId:
          type: string
    OpenBasketRequest:
      type: object
      properties:
        customerId:
          type: string
        customerType:
          type: string
    PostResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - OK
            - NO_SUCH_BASKET
            - BASKET_ALREADY_OPENED
            - NO_SUCH_EVENT
            - NO_SUCH_PLANOGRAM_ELEMENT
            - NO_SUCH_SHEKEL_PRODUCT
        success:
          type: boolean
    CloseBasketRequest:
      type: object
      properties:
        basketId:
          type: string
    CapsuleProductDetection:
      type: object
      properties:
        bayId:
          type: string
        externalBayId:
          type: string
        productsTakenId:
          type: string
        alternatives:
          type: array
          items:
            $ref: '#/components/schemas/ThinTakeDetails'
        productsTaken:
          type: array
          items:
            $ref: '#/components/schemas/ThinTakeDetails'
        probability:
          type: number
          format: double
        id:
          type: string
        timestamp:
          type: integer
          format: int64
    GetBasketResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - OK
            - NO_SUCH_BASKET
            - BASKET_ALREADY_OPENED
            - NO_SUCH_EVENT
            - NO_SUCH_PLANOGRAM_ELEMENT
            - NO_SUCH_SHEKEL_PRODUCT
        success:
          type: boolean
        basketId:
          type: string
        events:
          type: array
          items:
            $ref: '#/components/schemas/CapsuleProductDetection'
        startTime:
          type: string
          format: date-time
    ThinTakeDetails:
      type: object
      properties:
        quantityTaken:
          type: integer
          format: int32
        planogramElementId:
          type: string
        shekelProductId:
          type: string
        sku:
          type: string
        productName:
          type: string
        planogramElementOrdinal:
          type: integer
          format: int32
        shelfOrdinal:
          type: integer
          format: int32
        weightInGrams:
          type: number
          format: double
        identified:
          type: boolean
        misplaced:
          type: boolean
        imageFileResourceId:
          type: string
        id:
          type: string
    GetBasketRequest:
      type: object
      properties:
        basketId:
          type: string
        summaryMode:
          type: boolean
        filterMisplaced:
          type: boolean
    PlanogramTemplateElementCreate:
      type: object
      properties:
        productId:
          type: string
        orderLeftToRight:
          type: integer
          format: int32
        planogramTemplateId:
          type: string
        horizontalFacings:
          type: integer
          format: int32
        verticalFacings:
          type: integer
          format: int32
        maxQuantity:
          type: integer
          format: int32
        widthInMilliliters:
          type: number
          format: double
    PlanogramTemplateElementUpdate:
      type: object
      properties:
        productId:
          type: string
        orderLeftToRight:
          type: integer
          format: int32
        planogramTemplateId:
          type: string
        horizontalFacings:
          type: integer
          format: int32
        verticalFacings:
          type: integer
          format: int32
        maxQuantity:
          type: integer
          format: int32
        widthInMilliliters:
          type: number
          format: double
        id:
          type: string
    PlanogramTemplateElementFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        productId:
          type: string
        orderLeftToRight:
          type: integer
          format: int32
        maximumNumberOnSegment:
          type: integer
          format: int32
        quantity:
          type: integer
          format: int32
        planogramTemplateId:
          type: string
        horizontalSpaceMillimeters:
          type: integer
          format: int32
    ShelfTypeFiltering:
      type: object
      properties:
        id:
          type: string
        sort:
          type: array
          description: provides sorting information for the returned collectionAdd more sort parameters if you need to sort by more than 1 field.  The first sort parameter has highest sort priority and so on
          items:
            $ref: '#/components/schemas/SortParameter'
        nameLike:
          type: string
          description: 'provide filtering on name, for example: %myname% will retrieve all instances having myname anywhere inside their name '
          example: '%John Smith%'
        fullTextLike:
          type: string
          description: 'field to search free text '
        likeCaseSensitive:
          type: boolean
          description: if true, like strings are case sensitive.
        fromDate:
          type: string
          description: The creation date before which no instances will be retrieved.
          format: date-time
        toDate:
          type: string
          description: The creation date after which no instances will be retrieved.
          format: date-time
        pageSize:
          type: integer
          format: int32
        currentPage:
          type: integer
          description: The current page to retrieve, see pagesize, the first page is 0, if -1 is used, all data is returned, this is not recommended.
          format: int32
        resultType:
          type: string
        excludingIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassNotIdFiltering'
        onlyIds:
          type: array
          items:
            $ref: '#/components/schemas/BaseclassOnlyIdFiltering'
        tenantIds:
          type: array
          description: List of ids of tenants , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/TenantIdFiltering'
        clazzIds:
          type: array
          description: List of ids of clazz , these must be accessible by the current user.
          items:
            $ref: '#/components/schemas/ClazzIdFiltering'
        fetchSoftDelete:
          type: boolean
          description: fetch soft delete objects as well as non soft deleted objects
        permissionContextLike:
          type: string
          description: Search Permission Context
        planogramTemplateElementId:
          type: string
    ShelfTypeCreationContainer:
      type: object
      properties:
        name:
          type: string
        widthInMillimeters:
          type: number
          format: double
        depthInMillimeters:
          type: number
          format: double
        heightInMillimeters:
          type: number
          format: double
    ShelfTypeUpdateContainer:
      type: object
      properties:
        name:
          type: string
        widthInMillimeters:
          type: number
          format: double
        depthInMillimeters:
          type: number
          format: double
        heightInMillimeters:
          type: number
          format: double
        id:
          type: string
